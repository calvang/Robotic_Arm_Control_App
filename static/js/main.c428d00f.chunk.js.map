{"version":3,"sources":["Menu.tsx","kinematics.ts","Render.tsx","Controls.tsx","App.tsx","index.tsx"],"names":["default_angles","field_map","PopupField","props","index","className","type","name","value","target","onChange","e","new_target","setTarget","Automatic","onSubmit","preventDefault","style","display","task_columns","field","headerName","width","TaskList","tasks","isPlaying","handlePlayStop","handleView","TableContainer","component","Paper","Table","stickyHeader","aria-label","TableHead","TableRow","map","col","TableCell","TableBody","row","idx","scope","onClick","length","desc","task_command_control_columns","task_command_automatic_columns","TaskCommand","changeTask","currentTask","columns","useState","data","setData","color","marginTop","form","id","textAlign","row_idx","col_idx","backgroundColor","borderColor","new_data","handleChange","Tasks","setCurrentTask","setIsPlaying","activeTask","setActiveTask","executeTask","height","overflowY","Record","mode","taskRecord","stopRecording","startRecording","ValueSlider","withStyles","root","thumb","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","Settings","base_theta_delta","valueLabelDisplay","step","min","max","val","setBaseSpeed","joints_theta_delta","setJointSpeed","wrist_theta_delta","setWristSpeed","taskInterval","setTaskInterval","Help","MenuButton","handler","icon","Menu","help","setHelp","setTasks","settings","setSettings","record","setRecord","default_tasks","taskList","setTaskList","iterateTask","task_index","data_index","rad_angles","i","setControlAngles","position","zIndex","setControlMode","setAutomaticMode","new_tasks","console","log","setControlTask","current_interval","data_length","setTimeout","controlTask","new_taskList","task_num","saved_recordedTask","recordedTask","j","push","setTaskRecord","setRecordedTask","distance","pt1","pt2","Math","sqrt","pow","signed_arctan","coord","atan","PI","sign","solve_fk","joints","angles","links","prev_angle","prev_joint","cos","sin","solve_ik","current_e","curr_dist","reach","headIdx","tailIdx","linkIdx","r","scale","curr_vec","curr_angle","update_angles","error","extend","OrbitControls","DragControls","x_axis","Vector3","z_axis","arm_scale","base_offset","blue","white","max_base_angle","initial_angles","link_lengths","arm_length","reduce","a","b","arm_comps","Finger1","file","rotation","joint","pos_key","neg_key","Finger2","HandCover","HandBase","HandCase","AB","bounds","BC","CD","BaseE1","BaseE2","TurnTable","ArmComp","mesh","useRef","obj","useLoader","OBJLoader2","traverse","child","Mesh","material","MeshPhongMaterial","setRGB","set","ref","object","vec","pivot","point","theta","current","sub","applyAxisAngle","add","useFrame","controlKeys","clawStep","setClawStep","controlAngles","args","Hand","current_theta_delta","setCurrentThetaDelta","rotateOnAxis","curr_delta","abs","step_towards_angle","prevAngle","setPrevAngle","setAngles","modeInit","Arm","setModeInit","setJoints","prevBaseAngle","setPrevBaseAngle","baseAngle","setBaseAngle","calculate_kinematics","xz_comp","new_base_angle","base_angle","target_2D","orient_base","new_angles","y","same_pt","ArrowRight","ArrowLeft","new_joints","newRecordedTask","new_task_angles","handle_recording","fallback","Target","controls","useThree","camera","domElement","gl","targetSelected","toArray","setTargetSelected","Box","hovered","setHover","setActive","x","event","onPointerOver","onPointerOut","ViewControls","useEffect","update","enableZoom","Renderer","intensity","Controls","overflow","controlKeys_false","controlKeys_auto","App","setMode","setKeys","handleKeyDown","useCallback","prevKeys","key","handleKeyUp","handleAutoKeyDown","handleAutoKeyUp","window","addEventListener","removeEventListener","handleTaskRecord","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c428d00f.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { Slider, Table, TableBody, TableCell, TableContainer,\n         TableHead, TableRow, Paper, withStyles  } from '@material-ui/core'\nimport * as default_tasks from './default_tasks.json'\n// const { ipcRenderer } = window.require('electron')\n\nconst default_angles = [0, 90, -90, -90, 0, 0]\n\ninterface MenuProps {\n  mode: boolean,\n  setControlMode: any,\n  setAutomaticMode: any,\n  handleTaskRecord: any,\n  base_theta_delta: number,\n  joints_theta_delta: number,\n  wrist_theta_delta: number,\n  setBaseSpeed: any,\n  setJointSpeed: any, \n  setWristSpeed: any,\n  target: number[],\n  setTarget: any,\n  controlTask: boolean,\n  setControlTask: any,\n  setControlAngles: any,\n  taskRecord: boolean,\n  setTaskRecord: any,\n  recordedTask: number[][],\n  setRecordedTask: any\n}\n\ninterface PopupProps {\n  target: number[],\n  setTarget: any,\n  index: number // index to change within the target\n}\n\ninterface AutoProps {\n  target: number[],\n  setTarget: any,\n}\n\ninterface TaskProps {\n  tasks: any[],\n  changeTask: any,\n  currentTask: number,\n  isPlaying: boolean,\n  handlePlayStop: any,\n  handleView: any\n}\n\ninterface TaskViewProps {\n  tasks: any[],\n  changeTask: any,\n  isPlaying: boolean,\n  setIsPlaying: any,\n  activeTask: number,\n  setActiveTask: any,\n  executeTask: any,\n  controlTask: boolean,\n  setControlTask: any,\n  setControlAngles: any\n}\n\ninterface RecordProps {\n  mode: boolean,\n  taskRecord: boolean,\n  stopRecording: any,\n  startRecording: any\n}\n\ninterface SettingsProps {\n  base_theta_delta: number,\n  joints_theta_delta: number,\n  wrist_theta_delta: number,\n  setBaseSpeed: any,\n  setJointSpeed: any, \n  setWristSpeed: any,\n  taskInterval: number,\n  setTaskInterval: any\n}\n\ninterface MenuButtonProps {\n  icon: string,\n  handler: any,\n  active: boolean\n}\n\nconst field_map = [\"x\", \"y\", \"z\"]\n\nconst PopupField = (props: PopupProps) => {\n  const handleChange = (e: any) => {\n    let new_target = [...props.target]\n    new_target[props.index] = e.target.value\n    props.setTarget(new_target)\n  }\n\n  return ( \n    <td>\n      <label>{field_map[props.index]}</label>\n      <input className=\"PopupField\" type=\"text\" \n        name={field_map[props.index]} \n        value={props.target[props.index]}\n        onChange={handleChange} />\n    </td>\n  )\n}\n\nconst Automatic = (props: AutoProps) => {\n  const handleSubmit = (e: any) => { // this is here to prevent reloading\n    e.preventDefault()\n  }\n\n  return (\n    <div className=\"Popup\">\n      <b>Target Coordinates</b>\n      <form onSubmit={handleSubmit}>\n        <table><tbody><tr>\n          <PopupField \n            target={props.target}\n            setTarget={props.setTarget} \n            index={0} />\n          <PopupField \n            target={props.target}\n            setTarget={props.setTarget} \n            index={1} />\n          <PopupField \n            target={props.target}\n            setTarget={props.setTarget} \n            index={2} />\n        </tr></tbody></table>\n        <input type=\"submit\" style={{ display: \"none\" }} />\n      </form>\n    </div>\n  )\n}\n\nconst task_columns = [\n  { field: \"name\", headerName: \"Task\", width: 70 },\n  { field: \"length\", headerName: \"Length\", width: 30 },\n  { field: \"desc\", headerName: \"Description\", width: 200 }\n]\n\nconst TaskList = (props: TaskProps) => {\n  const { tasks, isPlaying, handlePlayStop, handleView } = props\n\n  return (\n    <TableContainer component={Paper}>\n      <Table stickyHeader aria-label=\"tasks table\">\n        <TableHead>\n          <TableRow>\n            { task_columns.map((col) => {\n              return <TableCell \n                key={col.field}\n                style={{ width: col.width}}>\n                <b>{col.headerName}</b>\n              </TableCell>\n            })}\n            <TableCell></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          { tasks.map((row, idx) => {\n            return <TableRow key={idx}>\n              <TableCell scope=\"row\">\n                <button className=\"TableButton\"\n                  onClick={() => handleView(idx)}>\n                  {row.name}\n                </button>\n              </TableCell>\n              <TableCell>{row.length}</TableCell>\n              <TableCell>{row.desc}</TableCell>\n              <TableCell>\n                <button \n                  className={isPlaying ? \"StopButton\" : \"PlayButton\"}\n                  onClick={() => handlePlayStop(idx)}>\n                  { isPlaying ? <i className=\"fa fa-stop-circle fa-2x\"></i>\n                    : <i className=\"fa fa-play-circle fa-2x\"></i> }\n                </button>\n              </TableCell>\n            </TableRow>\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nconst task_command_control_columns = [\n  { field: \"e\", headerName: \"Base (E)\", width: 50 },\n  { field: \"d\", headerName: \"Joint D\", width: 50 },\n  { field: \"c\", headerName: \"Joint C\", width: 50 },\n  { field: \"b\", headerName: \"Joint B\", width: 50 },\n  { field: \"a\", headerName: \"Joint A\", width: 50 },\n  { field: \"claw\", headerName: \"Claw\", width: 50 }\n]\n\nconst task_command_automatic_columns = [\n  { field: \"x\", headerName: \"X\", width: 100 },\n  { field: \"y\", headerName: \"Y\", width: 100 },\n  { field: \"z\", headerName: \"Z\", width: 100 }\n]\n\nconst TaskCommand = (props: TaskProps) => {\n  const { tasks, changeTask, currentTask, \n          isPlaying, handlePlayStop, handleView } = props\n  const columns = tasks[currentTask].type === \"control\" ? task_command_control_columns \n                : task_command_automatic_columns\n  const [data, setData] = useState(tasks[currentTask].data)\n\n  function handleChange(e: any, row_idx: number, col_idx: number) {\n    var new_data = [...data]\n    new_data[row_idx][col_idx] = e.target.value\n    setData(new_data)\n  }\n\n  return (\n    <>\n      <h4>{tasks[currentTask].name}</h4>\n      <div style={{ color: \"rgb(173, 173, 173)\", marginTop: \"-20px\"}}>\n        <button onClick={() => handleView(currentTask)} \n          style={{ width: \"50px\" }}>\n          <i className=\"fa fa-arrow-circle-left fa-2x\"></i>\n        </button>\n        <button \n          className={isPlaying ? \"StopButton\" : \"PlayButton\"}\n          style={{ width: \"50px\" }}\n          onClick={() => handlePlayStop(currentTask)}>\n          { isPlaying ? <i className=\"fa fa-stop-circle fa-2x\"></i>\n            : <i className=\"fa fa-play-circle fa-2x\"></i> }\n        </button>\n        <button type=\"submit\"\n          form={tasks[currentTask].name}\n          style={{ width: \"50px\" }}>\n          <i className=\"fa fa-save fa-2x\"></i>\n        </button>\n      </div>\n      <form id={tasks[currentTask].name} \n        onSubmit={(e) => changeTask(e, data, currentTask)}>\n        <TableContainer component={Paper}>\n          <Table stickyHeader aria-label=\"tasks table\">\n            <TableHead>\n              <TableRow>\n                { columns.map((col) => {\n                  return <TableCell \n                    key={col.field}\n                    style={{ textAlign: \"center\", width: col.width }}>\n                    <b>{col.headerName}</b>\n                  </TableCell>\n                })}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              { tasks[currentTask].data.map((row: any[], row_idx: number) => {\n                return <TableRow key={row_idx}>\n                  { columns.map((col, col_idx) => {\n                    return <TableCell \n                        key={col.field} style={{ textAlign: \"center\" }} >\n                        <input \n                          className=\"PopupField\"\n                          style={{ backgroundColor: \"white\", borderColor: \"white\" }}\n                          type=\"text\" \n                          name={`${row_idx},${col_idx}`} \n                          value={data[row_idx][col_idx]}\n                          onChange={(e) => handleChange(e, row_idx, col_idx)} />\n                      </TableCell>\n                  })}\n                </TableRow>\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <input type=\"submit\" style={{ display: \"none\" }} />\n      </form>\n    </>\n  )\n}\n\nconst Tasks = (props: TaskViewProps) => {\n  const [currentTask, setCurrentTask] = useState(-1) // index to displayed task (-1) is null\n  const { tasks, changeTask, isPlaying, setIsPlaying,\n          activeTask, setActiveTask, executeTask } = props\n  // var res = ipcRenderer.sendSync(\"tasks\", \"get\"))\n\n  function handlePlayStop(index: number) {\n    if (isPlaying && activeTask !== -1) {\n      setIsPlaying(false)\n      setActiveTask(-1)\n    }\n    else if (!isPlaying && activeTask === -1) {\n      setIsPlaying(true)\n      setActiveTask(index)\n      executeTask(index)\n    }\n  }\n\n  function handleView(index: number) {\n    if (currentTask === -1) // go from list to specific task\n      setCurrentTask(index)\n    else \n      setCurrentTask(-1)\n  }\n\n  return (\n    <div className=\"Menu\">\n      <div className=\"MenuHeader\"><h3>TASKS</h3></div>\n      <div className=\"MenuBody\" \n        style={{ height: \"calc(100vh - 56px\", overflowY: \"auto\" }}>\n        <br/>\n        { currentTask === -1 ? <TaskList \n            tasks={tasks}\n            changeTask={null}\n            currentTask={currentTask}\n            isPlaying={isPlaying}\n            handlePlayStop={handlePlayStop}\n            handleView={handleView} /> \n          : <TaskCommand \n          tasks={tasks}\n          changeTask={changeTask}\n          currentTask={currentTask}\n          isPlaying={isPlaying}\n          handlePlayStop={handlePlayStop}\n          handleView={handleView} />}\n          {/* <br/> */}\n      </div>\n    </div>\n  )\n}\n\nconst Record = (props: RecordProps) => {\n  const { mode, taskRecord, stopRecording, startRecording } = props\n\n  const onClick = (e: any) => {\n    if (taskRecord) stopRecording()\n    else startRecording()\n  }\n\n  return (\n    <div className={ `Record ${mode ? \"RecordAuto\" : \"RecordControl\"}` }>    \n      { \n        !taskRecord ? <>Start Recording:&nbsp;&nbsp;\n          <button className=\"RecordButton\" onClick={onClick}>\n            <i className=\"fa fa-circle fa-lg\" ></i>\n          </button></> \n        : <>Stop Recording:&nbsp;&nbsp;\n          <button className=\"RecordButton\" onClick={onClick}>\n            <i className=\"fa fa-stop-circle fa-lg\" ></i>\n          </button></> \n      }\n    </div>\n  )\n}\n\nconst ValueSlider = withStyles({\n  root: {\n    color: '#2469c4',\n    height: 8,\n    width: \"90%\"\n  },\n  thumb: {\n    height: 14,\n    width: 14,\n    backgroundColor: '#cbcdcf',\n    marginTop: -3,\n    marginLeft: -7,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-64%)',\n    // height: 4\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n\nconst Settings = (props: SettingsProps) => {\n  // const classes = useStyles()\n\n  const handleBase = (e: any, val: number | number[]) => {\n    props.setBaseSpeed(val)\n  }\n\n  const handleJoints = (e: any, val: number | number[]) => {\n    props.setJointSpeed(val)\n  }\n\n  const handleWrist = (e: any, val: number | number[]) => {\n    props.setWristSpeed(val)\n  }\n\n  const handleTaskInterval = (e: any, val: number | number[]) => {\n    props.setTaskInterval(val)\n  }\n\n\n  return (\n    <div className=\"Menu\">\n      <div className=\"MenuHeader\"><h3>Settings</h3></div>\n      <div className=\"MenuBody\">\n        <p>\n          The following parameters are rotational velocities in radians per frame of movement.\n        </p>\n        <h4>Base Rotation</h4>\n          <ValueSlider \n            value={props.base_theta_delta}\n            valueLabelDisplay=\"auto\"\n            track=\"inverted\"\n            step={0.01}\n            min={0.02}\n            max={1}\n            onChange={handleBase} />\n        <h4>Joint Rotation</h4>\n          <ValueSlider \n            value={props.joints_theta_delta}\n            valueLabelDisplay=\"auto\"\n            track=\"inverted\"\n            step={0.01}\n            min={0.01}\n            max={1}\n            onChange={handleJoints} />\n        <h4>Wrist Rotation</h4>\n          <ValueSlider \n            value={props.wrist_theta_delta}\n            valueLabelDisplay=\"auto\"\n            track=\"inverted\"\n            step={0.01}\n            min={0.01}\n            max={1}\n            onChange={handleWrist} />\n        <h4>Task Step Interval</h4>\n          <ValueSlider \n            value={props.taskInterval}\n            valueLabelDisplay=\"auto\"\n            track=\"inverted\"\n            step={100}\n            min={500}\n            max={8000}\n            onChange={handleTaskInterval} /><br/><br/>\n      </div>\n    </div>\n  )\n}\n\nconst Help = () => {\n  return (\n    <div className=\"Menu\">\n      <div className=\"MenuHeader\"><h3>HELP</h3></div>\n      <div className=\"MenuBody\">\n        <h4><i className=\"fa fa-arrows fa-lg\" ></i> Control Mode</h4>\n        <p>\n          In control mode, the arm is directly controlled via the following keybindings:<br/><br/>\n          <code>ArrowRight/ArrowLeft</code> - Base E Yaw<br/>\n          <code>ArrowUp/ArrowDown</code> - Joint D Pitch<br/>\n          <code>R/F</code> - Joint C Pitch<br/>\n          <code>W/S</code> - Joint B Pitch<br/>\n          <code>D/A</code> - Wrist A Roll<br/>\n          <code>X/Z</code> - End Effector Open/Close<br/>\n        </p>\n        <h4><i className=\"fa fa-magic fa-lg\" ></i> Automatic Mode</h4>\n        <p>\n          In automatic mode, keyboard controls for the arm except for those for the wrist and claw are disabled, \n          and the arm uses inverse kinematics the navigate by following inputed coordinates.<br/><br/>\n          Target coordinates are indicated by an orange point can be changed through a popup tool or by dragging the point\n          around. To drag the point, click the object to disable orbit controls and then use the mouse to drag it.\n          Tasks can be recorded in this mode by pressing the record button <i className=\"fa fa-plus-square-o fa-lg\" ></i>.\n        </p>\n        <h4><i className=\"fa fa-files-o fa-lg\" ></i> Tasks</h4>\n        <p>\n          Tasks are lists of instructions that can program the arm to move in a predetermined pattern. <br/><br/>\n          Example instruction with arm angles: \n        </p>\n        <pre>\n          # Schema: angles in degrees <br/>\n          # E  D  C  B  A Claw (0/1 = true/false)<br/>\n          90 40 30 90 120 0\n        </pre>\n        <p>Example instruction with target positions: </p>\n        <pre>\n          # Schema: end effector positon <br/>\n          # x   y   z <br/>\n          1.56 5.87 2.35 \n        </pre>\n      </div>\n    </div>\n  )\n}\n\nconst MenuButton = (props: MenuButtonProps) => {\n  return (\n    <li className={props.active ? \"active_opt\" : \"\" }>\n      <button onClick={props.handler}>\n        <i className={`fa ${props.icon} fa-2x`} ></i>\n      </button>\n    </li>\n  )\n}\n\nexport default function Menu(props: MenuProps) {\n  const [help, setHelp] = useState(false)\n  const [tasks, setTasks] = useState(false)\n  const [settings, setSettings] = useState(false)\n  const [record, setRecord] = useState(false)\n  const [taskList, setTaskList] = useState(default_tasks.tasks)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [activeTask, setActiveTask] = useState(-1)\n  const [taskInterval, setTaskInterval] = useState(5000) // interval between task iters\n\n  const handleHelp = () => {\n    if (help) setHelp(false)\n    else {\n      if (tasks) setTasks(false)\n      else if (settings) setSettings(false)\n      setHelp(true)\n    }\n  }\n\n  const handleTasks = () => {\n    if (tasks) setTasks(false)\n    else {\n      if (help) setHelp(false)\n      else if (settings) setSettings(false)\n      setTasks(true)\n    }\n  }\n\n  const handleSettings = () => {\n    if (settings) setSettings(false)\n    else {\n      if (tasks) setTasks(false)\n      else if (help) setHelp(false)\n      setSettings(true)\n    }\n  }\n\n  const handleRecord = () => {\n    if (record) setRecord(false)\n    else setRecord(true)\n  }\n\n  const changeTask = (e: any, data: any[], index: number) => {\n    e.preventDefault()\n    var new_tasks = [...taskList]\n    new_tasks[index].data = data\n    new_tasks[index].length = data.length\n    setTaskList(new_tasks)\n    console.log(0)\n  }\n\n  function executeTask(task_index: number) {\n    if (taskList[task_index].type === \"control\") {\n      props.setControlMode()\n      props.setControlAngles(default_angles)\n      props.setControlTask(true)\n    }\n    if (taskList[task_index].type === \"automatic\")\n      props.setAutomaticMode()\n    var current_interval = taskInterval\n    var data_length = taskList[task_index].data.length\n    for (let data_index = 0; data_index < data_length; ++data_index) {\n      setTimeout(function(){\n        iterateTask(task_index, data_index)\n      }, current_interval)\n      current_interval += taskInterval\n    }\n    setTimeout(function(){ // reset to starting position\n      props.setControlAngles(default_angles)\n    }, taskInterval * (data_length + 1))\n    setTimeout(function(){\n      props.setControlTask(false)\n    }, taskInterval * (data_length + 2))\n    setIsPlaying(false)\n    setActiveTask(-1)\n  }\n\n  const iterateTask = (task_index: number, data_index: number) => {\n    if (taskList[task_index].type === \"control\") {\n      var rad_angles = [...taskList[task_index].data[data_index]]// convert to radians\n      for (let i = 0; i < taskList[task_index].data[data_index].length-1; ++i) \n        rad_angles[i] *= 0.01745329\n      props.setControlAngles(rad_angles)\n    }\n    else if (taskList[task_index].type === \"automatic\")\n      props.setTarget(taskList[task_index].data[data_index])\n  }\n\n  const startRecording = () => {\n    props.setTaskRecord(true)\n  }\n\n  const stopRecording = () => { \n    let new_taskList = [...taskList]\n    let task_num = 1 + taskList.length - default_tasks.tasks.length\n    var saved_recordedTask = [...props.recordedTask]\n    if (!props.mode) { // convert to degrees\n      for (let i = 0; i < saved_recordedTask.length; ++i) {\n        for (let j = 0; j < saved_recordedTask[0].length-1; ++j)\n          saved_recordedTask[i][j] *= 57.29578\n      }\n    }\n    new_taskList.push({\n      name: `task${task_num}`,\n      desc: `Recorded Task ${task_num}`,\n      type: props.mode ? \"automatic\" : \"control\",\n      length: props.recordedTask.length,\n      data: saved_recordedTask\n    })\n    setTaskList(new_taskList) // add recorded task to task list\n    props.setTaskRecord(false)\n    props.setRecordedTask([])\n  }\n\n  return (\n    <div style={{ color: \"white\", position: \"absolute\", zIndex: 2 }}>\n      <ul>\n        <MenuButton icon=\"fa-arrows\" handler={props.setControlMode} active={!props.mode} />\n        <MenuButton icon=\"fa-magic\" handler={props.setAutomaticMode} active={props.mode}/>\n        <MenuButton icon=\"fa-files-o\" handler={handleTasks} active={tasks}/>\n        <MenuButton icon=\"fa-plus-square-o\" handler={handleRecord} active={record}/>\n        <MenuButton icon=\"fa-tasks\" handler={handleSettings} active={settings}/>\n        <MenuButton icon=\"fa-question-circle-o\" handler={handleHelp} active={help}/>\n      </ul>\n      { props.mode && <Automatic \n        target={props.target}\n        setTarget={props.setTarget} /> }\n      { tasks && <Tasks \n        tasks={taskList} \n        changeTask={changeTask}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        activeTask={activeTask}\n        setActiveTask={setActiveTask}\n        executeTask={executeTask}\n        controlTask={props.controlTask}\n        setControlTask={props.setControlTask}\n        setControlAngles={props.setControlAngles} /> }\n      { record && <Record \n        mode={props.mode}\n        taskRecord={props.taskRecord}\n        stopRecording={stopRecording}\n        startRecording={startRecording} /> }\n      { settings && <Settings \n        base_theta_delta={props.base_theta_delta} \n        joints_theta_delta={props.joints_theta_delta} \n        wrist_theta_delta={props.wrist_theta_delta}\n        setBaseSpeed={props.setBaseSpeed}\n        setJointSpeed={props.setJointSpeed}\n        setWristSpeed={props.setWristSpeed}\n        taskInterval={taskInterval}\n        setTaskInterval={setTaskInterval} /> }\n      { help && <Help /> }\n    </div>\n  )\n}","/**\n * Kinematics Javascript Library\n * \n * Constraints:\n * - The base must be centered at [0,0,0]\n * - The arm joints must all be constrained to a 2D plane\n *   aside from the base and the wrist\n */\n\n/**\n * Find the distance between two 2D points\n */\nfunction distance(pt1: number[], pt2: number[]) {\n    return Math.sqrt(Math.pow(pt2[0]-pt1[0],2) + Math.pow(pt2[1]-pt1[1],2))\n}\n\n/**\n * Solve for the angle of a given coordinate wrt the x-axis\n */\nfunction signed_arctan(coord: number[]) {\n    return Math.atan(coord[1] / coord[0]) + Math.PI * (1 - Math.sign(coord[0])) / 2\n}\n\n/**\n * Find position of the end effector and update joint positions (forward kinematics)\n * \n * @param joints \n * @param angles \n */\nexport function solve_fk(joints: number[][], angles: number[], links: number[]) {\n    var prev_angle = angles[0]\n    var prev_joint = [...joints[0]]\n    for (let i = 1; i < angles.length; ++i) {\n        prev_joint[0] += links[i] * Math.cos(prev_angle)\n        prev_joint[1] += links[i] * Math.sin(prev_angle)\n        prev_angle += angles[i]\n        joints[i] = [...prev_joint]\n    }\n    return joints // updated joint positions with end effector\n}\n\n/**\n * Update angles based on correct joint positions\n * \n * @param joints \n * @param angles \n */\nexport function update_angles(joints: number[][], angles: number[]) {\n    var prev_angle = 0\n    var curr_vec = [0,0]\n    for (let i = 1; i < angles.length; ++i) { // update the angles\n        curr_vec[0] = joints[i][0] - joints[i-1][0]\n        curr_vec[1] = joints[i][1] - joints[i-1][1]\n        var curr_angle = signed_arctan(curr_vec) - prev_angle\n        if (curr_angle > Math.PI) curr_angle -= 2*Math.PI\n        else if (curr_angle < -Math.PI) curr_angle += 2*Math.PI\n        angles[i-1] = curr_angle\n        prev_angle += curr_angle\n    }\n    return angles\n}\n\n/**\n * Find the angles to reach the target (inverse kinematics)\n * \n * @param joints      - size 4x2 array of 2D joint positions ([0,0],D,C,B)\n * @param angles      - size 4 array of joint angles (D, C, B, 0)\n * @param links       - size 4 array of link lengths (0, CD, BC, AB)\n * @param length      - total length of the arm\n * @param target      - 2D target coordinates\n */\nexport function solve_ik(joints: number[][], angles: number[],\n    links: number[], length: number, target: number[] ) {\n\n    var eps = 0.01 // distance threshold\n    if (distance([0,0], target) > length) {\n        console.error(\"Target out of range:\", target)\n        return \n    }\n\n    // get the position of the end effector\n    var current_e = solve_fk(joints, angles, links)[joints.length-1]\n    var curr_dist = distance(current_e, target)\n\n    const reach = (headIdx: number, tailIdx: number, linkIdx: number) => {\n        let r = distance(joints[headIdx], joints[tailIdx])\n        let scale = links[linkIdx] / r\n        joints[tailIdx][0] = (1-scale)*joints[headIdx][0] + scale*joints[tailIdx][0]\n        joints[tailIdx][1] = (1-scale)*joints[headIdx][1] + scale*joints[tailIdx][1]\n        // joints[tailIdx] = [(1-scale)*joints[headIdx][0] + scale*joints[tailIdx][0],\n        //                     (1-scale)*joints[headIdx][1] + scale*joints[tailIdx][1]]\n    }\n    // console.log(joints)\n    while (curr_dist > eps) { // solve for the new joint positions\n        joints[joints.length-1] = target\n        for (let i = joints.length-2; i > 0; --i)\n            reach(i+1, i, i+1)\n        for (let i = 1; i < joints.length-1; ++i)\n            reach(i, i+1, i+1)\n        current_e = joints[joints.length-1]\n        curr_dist = distance(current_e, target)\n    }\n\n    return update_angles(joints, angles)\n}\n\n/**\n * Orient the base towards the desired target point using inverse kinematic\n */\nexport function orient_base(target: number[]) {\n    var xz_comp = [target[0], target[2]]\n    var new_base_angle = signed_arctan(xz_comp)\n    if (new_base_angle > Math.PI) new_base_angle -= 2*Math.PI\n    else if (new_base_angle < -Math.PI) new_base_angle += 2*Math.PI\n    var h = distance([0,0], xz_comp)\n    return { base_angle: new_base_angle,\n             target_2D:  [h, target[1]] }\n}\n","import React, { useRef, useState, Suspense, useEffect } from 'react'\nimport { Canvas, MeshProps, Vector3Props, useFrame, useLoader, useThree, extend, ReactThreeFiber } from 'react-three-fiber'\nimport { OBJLoader2 } from 'three/examples/jsm/loaders/OBJLoader2.js'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { DragControls } from 'three/examples/jsm/controls/DragControls'\nimport { Mesh, Vector3, MeshPhongMaterial } from 'three'\nimport { solve_fk, solve_ik, orient_base } from './kinematics'\nextend({ OrbitControls, DragControls })\n\ndeclare global { // workaround for using OrbitControls as a JSX component\n  namespace JSX {\n    interface IntrinsicElements {\n      'orbitControls': ReactThreeFiber.Object3DNode<OrbitControls, typeof OrbitControls>,\n      'dragControls': ReactThreeFiber.Object3DNode<DragControls, typeof DragControls>\n    }\n  }\n}\n\ninterface FingerProps {\n  clawStep: number, // iterations of the claw\n  setClawStep: any,\n  controlTask: boolean,\n  controlAngles: number[]\n}\n\ninterface WristProps {\n  wrist_theta_delta: number,\n  controlTask: boolean,\n  controlAngles: number[]\n}\n\ninterface JointProps {\n  joints_theta_delta: number,\n  wrist_theta_delta: number,\n  angles: number[],\n  setAngles: any,\n  mode: boolean,\n  modeInit: boolean,\n  controlTask: boolean,\n  controlAngles: number[]\n}\n\ninterface CompProps {\n  file: string,    // path to .obj file\n  color: number[]  // RGB color values\n}\n\ninterface ControlProps {\n  controlKeys: any\n}\n\ninterface TargetProps {\n  target: number[],\n  setTarget: any,\n  targetSelected: boolean,\n  setTargetSelected: any\n}\n\ninterface RenderProps {\n  target: number[],\n  setTarget: any,\n  base_theta_delta: number,\n  joints_theta_delta: number,\n  wrist_theta_delta: number,\n  mode: boolean,\n  controlKeys: any,\n  controlTask: boolean,\n  setControlTask: any,\n  controlAngles: number[],\n  setControlAngles: any,\n  taskRecord: boolean,\n  recordedTask: any[],\n  setRecordedTask: any\n}\n\nconst x_axis             = new Vector3(1, 0, 0)\nconst z_axis             = new Vector3(0, 0, 1)\nconst arm_scale          = 0.01\nconst base_offset        = [0.35, 0.81, 0]\nconst blue               = [0.05, 0.15, 0.6]\nconst white              = [0.5, 0.5, 0.5]\nconst base_constraints   = [-125*180/Math.PI, 125*180/Math.PI] // angle contraints for base\nconst joint_constraints  = [] // TODO\nconst max_base_angle     = 3*Math.PI/4 + 0. // maximum angle base will turn at once\nconst inital_base_angle  = 0 //-Math.PI/2\nconst initial_angles     = [Math.PI/2, -Math.PI/2, -Math.PI/2, 0]  // D, C, D angles (rad)\nconst link_lengths       = [0, 1.58, 1.403, 1.54] // CD, BC, AB + Effector lengths\nconst arm_length         = link_lengths.reduce((a,b) => { return a + b }) // total arm length\nconst claw_steps         = 60 // max steps to take with the claw\nconst claw_theta_delta   = 0.004 \n\nconst arm_comps = {\n  Finger1: { file: \"models/linkage_finger1.obj\", // the further finger at the start\n        color: white,\n        position: [1.04, -0.11, 0.15],\n        rotation: [Math.PI, 0, Math.PI],\n        joint: [0, 0.14, 0.225 ],\n        pos_key: \"x\", neg_key: \"z\" },\n  Finger2: { file: \"models/linkage_finger2.obj\", // the closer finger at the start\n        color: white,\n        position: [1.04, 0.455, 0.05],\n        rotation: [Math.PI , Math.PI, 0],\n        joint: [0, 0.12, 0.225],\n        pos_key: \"x\", neg_key: \"z\" },\n  HandCover: { file:  \"models/moment_body.obj\",\n        color: white,\n        position: [0.666, 0, 0.072],\n        rotation: [0, Math.PI, 0] },\n  HandBase: { file:  \"models/torque_base.obj\",\n        color: white,\n        position: [0.668, 0, 0.176],\n        rotation: [0, Math.PI, 0] },\n  HandCase: { file: \"models/torque_servo.obj\",\n        color: blue,\n        position: [-0.42, 0.08, 0.05],\n        rotation: [-Math.PI/2, 0, Math.PI],\n        joint: [0, 0.16, 0.225],\n        pos_key: \"a\", neg_key: \"d\" },\n  AB: { file: \"models/AB_stepper.obj\", // .obj file path\n        color: white,                  // color to set object to\n        position: [1.76, -0.2, -0.46], // starting position\n        rotation: [0, 0, Math.PI/2],   // starting angle\n        joint: [1.58, 0.28, 0],        // pivot point for joint\n        bounds: [-125, 125],\n        pos_key: \"w\", neg_key: \"s\" },\n  BC: { file: \"models/BC.obj\",\n        color: blue,\n        position: [0.22, 0.38, 0.47],\n        rotation: [Math.PI , Math.PI, Math.PI/2],\n        joint: [0.46, 0.18, 0],\n        bounds: [-125, 125],\n        pos_key: \"r\", neg_key: \"f\" },\n  CD: { file: \"models/CD.obj\",\n        color: white,\n        position: [0.35, 1.93, -0.22],\n        rotation: [-Math.PI , Math.PI, -Math.PI/2 ],\n        joint: [0.16, 0.81, 0],\n        bounds: [0, 180],\n        pos_key: \"ArrowUp\", neg_key: \"ArrowDown\" },\n  BaseE1: { file: \"models/BaseEnew.obj\",\n        color: blue,\n        position: [0.32, -0.02, 0.26],\n        rotation: [-Math.PI/2, 0.24, Math.PI] },\n  BaseE2: { file: \"models/BaseEnewother.obj\",\n        color: blue,\n        position: [-0.38, 0.14, 0.26],\n        rotation: [-Math.PI/2, 0.24, 0] },\n  TurnTable: { file: \"models/newTurntable.obj\",\n        color: blue,\n        position: [0, 0, 0],\n        rotation: [Math.PI/2, Math.PI, -Math.PI/2] }\n}\n\nconst ArmComp: React.FC<MeshProps & CompProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const obj: any = useLoader(OBJLoader2, props.file) // loader for .obj\n  obj.traverse(function (child: any) {  // set mesh material colors\n    if (child instanceof Mesh) {\n      child.material = new MeshPhongMaterial()\n      child.material.color.setRGB(props.color[0],props.color[1],props.color[2]) \n    }\n    })    \n  obj.scale.set( arm_scale, arm_scale, arm_scale );\n  return <mesh {...props} ref={mesh}><primitive object={obj} /></mesh>\n}\n\nconst Finger1: React.FC<MeshProps & Vector3Props & FingerProps\n  & CompProps & ControlProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const vec = useRef<Vector3>()\n  \n  function pivot(point: Vector3, theta: number) { // rotate object around a given point\n    if (mesh.current) {\n      mesh.current.position.sub(point) // remove the offset\n      mesh.current.position.applyAxisAngle(z_axis, theta) // rotate the POSITION\n      mesh.current.position.add(point) // re-add the offset\n    }\n  }\n\n  useFrame(() => {\n    if (vec.current) {\n      if (props.controlKeys[arm_comps.Finger1.pos_key] \n        && props.clawStep < claw_steps) {\n        props.setClawStep(props.clawStep + 1)\n        pivot(vec.current, -claw_theta_delta)\n      }\n      else if (props.controlKeys[arm_comps.Finger1.neg_key]\n        && props.clawStep >= 0) {\n        props.setClawStep(props.clawStep - 1)\n        pivot(vec.current, +claw_theta_delta)\n      }\n      if (props.controlTask && props.controlAngles.length > 0) {\n        if (props.controlAngles[5] === 1 && props.clawStep < claw_steps) {\n          props.setClawStep(props.clawStep + 1)\n          pivot(vec.current, -claw_theta_delta)\n        }\n        else if (props.controlAngles[5] === 0 && props.clawStep >= 0) {\n          props.setClawStep(props.clawStep - 1)\n          pivot(vec.current, +claw_theta_delta)\n        }\n      }\n    }\n  })\n\n  return (\n    <mesh {...props} ref={mesh}>\n      <ArmComp file={props.file} color={props.color}/>\n      <vector3 ref={vec} args={arm_comps.Finger1.joint as any}/>\n    </mesh>\n  )\n}\n\nconst Finger2: React.FC<MeshProps & Vector3Props & FingerProps \n  & CompProps & ControlProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const vec = useRef<Vector3>()\n  \n  function pivot(point: Vector3, theta: number) { // rotate object around a given point\n    if (mesh.current) {\n      mesh.current.position.sub(point) // remove the offset\n      mesh.current.position.applyAxisAngle(z_axis, -theta) // rotate the POSITION\n      mesh.current.position.add(point) // re-add the offset\n    }\n  }\n\n  useFrame(() => {\n    if (vec.current) {\n      if (props.controlKeys[arm_comps.Finger2.pos_key] \n        && props.clawStep < claw_steps) {\n        props.setClawStep(props.clawStep + 1)\n        pivot(vec.current, -claw_theta_delta)\n      }\n      else if (props.controlKeys[arm_comps.Finger2.neg_key]\n        && props.clawStep >= 0) {\n        props.setClawStep(props.clawStep - 1)\n        pivot(vec.current, +claw_theta_delta)\n      }\n      if (props.controlTask && props.controlAngles.length > 0) {\n        if (props.controlAngles[5] === 1 && props.clawStep < claw_steps) {\n          props.setClawStep(props.clawStep + 1)\n          pivot(vec.current, -claw_theta_delta)\n        }\n        else if (props.controlAngles[5] === 0 && props.clawStep >= 0) {\n          props.setClawStep(props.clawStep - 1)\n          pivot(vec.current, +claw_theta_delta)\n        }\n      }\n    }\n  })\n\n  return (\n    <mesh {...props} ref={mesh}>\n      <ArmComp file={props.file} color={props.color}/>\n      <vector3 ref={vec} args={arm_comps.Finger2.joint as any}/>\n    </mesh>\n  )\n}\n\n\nconst Hand: React.FC<MeshProps & Vector3Props & WristProps\n  & CompProps & ControlProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const vec = useRef<Vector3>()\n  const [clawStep, setClawStep] = useState(0) // number of claw iterations\n  const [current_theta_delta, setCurrentThetaDelta] = useState(0)\n\n  function pivot(point: Vector3, theta: number) { // rotate object around a given point\n    if (mesh.current) {\n      mesh.current.position.sub(point) // remove the offset\n      mesh.current.position.applyAxisAngle(x_axis, theta) // rotate the POSITION\n      mesh.current.position.add(point) // re-add the offset\n      mesh.current.rotateOnAxis(x_axis, -theta) // rotate the OBJECT\n    }\n  }\n\n  function step_towards_angle() {\n    if (vec.current) {\n      let curr_delta = props.controlAngles[4] - current_theta_delta\n      var norm_delta = Math.abs(curr_delta)\n      if (norm_delta < props.wrist_theta_delta) {\n        pivot(vec.current, curr_delta)\n        setCurrentThetaDelta(props.controlAngles[4])\n      }\n      else {\n        if (props.controlAngles[4] > current_theta_delta) {\n          pivot(vec.current, +props.wrist_theta_delta)\n          setCurrentThetaDelta(current_theta_delta + props.wrist_theta_delta)\n        }\n        else if (props.controlAngles[4] < current_theta_delta) {\n          pivot(vec.current, -props.wrist_theta_delta)\n          setCurrentThetaDelta(current_theta_delta - props.wrist_theta_delta)\n        }\n      }\n    }\n  }\n\n  useFrame(() => {\n    if (vec.current) {\n      if (props.controlKeys[arm_comps.HandCase.pos_key])\n        pivot(vec.current, +props.wrist_theta_delta)\n      else if (props.controlKeys[arm_comps.HandCase.neg_key])\n        pivot(vec.current, -props.wrist_theta_delta)\n      if (props.controlTask && props.controlAngles.length > 0) // handle control task\n        step_towards_angle()\n    }\n  })\n\n  return (\n    <mesh {...props} ref={mesh}>\n      <ArmComp file={props.file} color={props.color}/>\n      <vector3 ref={vec} args={arm_comps.HandCase.joint as any}/>\n      <ArmComp // Hand Base\n        file={arm_comps.HandBase.file} \n        color={arm_comps.HandBase.color}\n        position={arm_comps.HandBase.position as any}\n        rotation={arm_comps.HandBase.rotation as any} />\n      <ArmComp // Hande Cover\n        file={arm_comps.HandCover.file} \n        color={arm_comps.HandCover.color}\n        position={arm_comps.HandCover.position as any}\n        rotation={arm_comps.HandCover.rotation as any} />\n      <Finger1 // Finger 1\n        controlKeys={props.controlKeys}\n        file={arm_comps.Finger1.file}\n        color={arm_comps.Finger1.color}\n        position={arm_comps.Finger1.position as any}\n        rotation={arm_comps.Finger1.rotation as any} \n        clawStep={clawStep}\n        setClawStep={setClawStep}\n        controlTask={props.controlTask}\n        controlAngles={props.controlAngles} />\n      <Finger2 // Finger 2\n        controlKeys={props.controlKeys}\n        file={arm_comps.Finger2.file}\n        color={arm_comps.Finger2.color}\n        position={arm_comps.Finger2.position as any}\n        rotation={arm_comps.Finger2.rotation as any}\n        clawStep={clawStep}\n        setClawStep={setClawStep}\n        controlTask={props.controlTask}\n        controlAngles={props.controlAngles} />\n    </mesh>\n  )\n}\n\nconst AB: React.FC<MeshProps & Vector3Props & JointProps\n  & CompProps & ControlProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const vec = useRef<Vector3>()\n  const [prevAngle, setPrevAngle] = useState(initial_angles[2])\n  \n  function pivot(point: Vector3, theta: number) { // rotate object around a given point\n    if (mesh.current) {\n      mesh.current.position.sub(point) // remove the offset\n      mesh.current.position.applyAxisAngle(z_axis, theta) // rotate the POSITION\n      mesh.current.position.add(point) // re-add the offset\n      mesh.current.rotateOnAxis(z_axis, theta) // rotate the OBJECT\n    }\n  }\n\n  function step_towards_angle() {\n    const { joints_theta_delta } = props\n    if (vec.current) {\n      var curr_delta = props.angles[2] - prevAngle\n      var norm_delta = Math.abs(curr_delta)\n      if (norm_delta < joints_theta_delta) {\n        pivot(vec.current, curr_delta)\n        setPrevAngle(props.angles[2])\n      }\n      else {\n        if (props.angles[2] > prevAngle) {\n          pivot(vec.current, +joints_theta_delta)\n          setPrevAngle(prevAngle + joints_theta_delta)\n        }\n        else if (props.angles[2] < prevAngle) {\n          pivot(vec.current, -joints_theta_delta)\n          setPrevAngle(prevAngle - joints_theta_delta)\n        }\n      }\n    }\n  }\n\n  useFrame(() => {\n    const { angles, setAngles, joints_theta_delta } = props\n    if (vec.current) {\n      if (props.controlKeys[arm_comps.AB.pos_key]) {\n        pivot(vec.current, +joints_theta_delta)\n        setAngles([angles[0], angles[1], angles[2] + joints_theta_delta, 0])\n        setPrevAngle(angles[2] + joints_theta_delta)  \n      }\n      else if (props.controlKeys[arm_comps.AB.neg_key]) {\n        pivot(vec.current, -joints_theta_delta)\n        setAngles([angles[0], angles[1], angles[2] - joints_theta_delta, 0])\n        setPrevAngle(angles[2] - joints_theta_delta)\n      }\n      if (props.mode && props.modeInit) { // update angle using ik\n        // let theta_delta = props.angles[2] - prevAngle\n        // pivot(vec.current, theta_delta)\n        // setPrevAngle(props.angles[2])\n        step_towards_angle()\n      }\n      if (props.controlTask && props.controlAngles.length > 0) // handle control task\n        step_towards_angle()\n    }\n  })\n\n  return (\n    <mesh {...props} ref={mesh}>\n      <ArmComp file={props.file} color={props.color}/>\n      <vector3 ref={vec} args={arm_comps.AB.joint as any}/>\n      <Hand \n        controlKeys={props.controlKeys} \n        file={arm_comps.HandCase.file} \n        color={arm_comps.HandCase.color}\n        position={arm_comps.HandCase.position as any}\n        rotation={arm_comps.HandCase.rotation as any}\n        wrist_theta_delta={props.wrist_theta_delta}\n        controlTask={props.controlTask}\n        controlAngles={props.controlAngles} />\n    </mesh>\n  )\n}\n\nconst BC: React.FC<MeshProps & Vector3Props & JointProps\n  & CompProps & ControlProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const vec = useRef<Vector3>()\n  const [prevAngle, setPrevAngle] = useState(initial_angles[1])\n  \n  function pivot(point: Vector3, theta: number) {\n    if (mesh.current) {\n      mesh.current.position.sub(point) // remove the offset\n      mesh.current.position.applyAxisAngle(z_axis, theta) // rotate the POSITION\n      mesh.current.position.add(point) // re-add the offset\n      mesh.current.rotateOnAxis(z_axis, theta) // rotate the OBJECT\n    }\n  }\n\n  function step_towards_angle() {\n    const { joints_theta_delta } = props\n    if (vec.current) {\n      var curr_delta = props.angles[1] - prevAngle\n      var norm_delta = Math.abs(curr_delta)\n      if (norm_delta < joints_theta_delta) {\n        pivot(vec.current, curr_delta)\n        setPrevAngle(props.angles[1])\n      }\n      else {\n        if (props.angles[1] > prevAngle) {\n          pivot(vec.current, +joints_theta_delta)\n          setPrevAngle(prevAngle + joints_theta_delta)\n        }\n        else if (props.angles[1] < prevAngle) {\n          pivot(vec.current, -joints_theta_delta)\n          setPrevAngle(prevAngle - joints_theta_delta)\n        }\n      }\n    }\n  }\n\n  useFrame(() => {\n    const { angles, setAngles, joints_theta_delta } = props\n    if (vec.current) {\n      if (props.controlKeys[arm_comps.BC.pos_key]) {\n        pivot(vec.current, +joints_theta_delta)\n        setAngles([angles[0], angles[1] + joints_theta_delta, angles[2], 0])\n        setPrevAngle(angles[1] + joints_theta_delta)\n      }\n      else if (props.controlKeys[arm_comps.BC.neg_key]) {\n        pivot(vec.current, -joints_theta_delta)\n        setAngles([angles[0], angles[1] - joints_theta_delta, angles[2], 0])\n        setPrevAngle(angles[1] - joints_theta_delta)\n      }\n      if (props.mode && props.modeInit) { // update angle using ik\n        // let theta_delta = props.angles[1] - prevAngle\n        // pivot(vec.current, theta_delta)\n        // setPrevAngle(props.angles[1])\n        step_towards_angle()\n      }\n      if (props.controlTask && props.controlAngles.length > 0) // handle control task\n        step_towards_angle()\n    }\n  })\n  \n  return (\n    <mesh {...props}\n      ref={mesh}>\n      <ArmComp file={props.file} color={props.color}/>\n      <vector3 ref={vec} args={arm_comps.BC.joint as any}/>\n      <AB controlKeys={props.controlKeys}\n          file={arm_comps.AB.file}\n          color={arm_comps.AB.color}\n          position={arm_comps.AB.position as any}\n          rotation={arm_comps.AB.rotation as any}\n          joints_theta_delta={props.joints_theta_delta}\n          wrist_theta_delta={props.wrist_theta_delta}\n          angles={props.angles}\n          setAngles={props.setAngles}\n          mode={props.mode}\n          modeInit={props.modeInit}\n          controlTask={props.controlTask}\n          controlAngles={props.controlAngles} />\n    </mesh>\n  )\n}\n\nconst CD: React.FC<MeshProps & Vector3Props & JointProps\n  & CompProps & ControlProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const vec = useRef<Vector3>()\n  const [prevAngle, setPrevAngle] = useState(initial_angles[0])\n\n  function pivot(point: Vector3, theta: number) {\n    if (mesh.current) {\n      mesh.current.position.sub(point) // remove the offset\n      mesh.current.position.applyAxisAngle(z_axis, theta) // rotate the POSITION\n      mesh.current.position.add(point) // re-add the offset\n      mesh.current.rotateOnAxis(z_axis, theta) // rotate the OBJECT\n    }\n  }\n\n  function step_towards_angle() {\n    const { joints_theta_delta } = props\n    if (vec.current) {\n      var curr_delta = props.angles[0] - prevAngle\n      var norm_delta = Math.abs(curr_delta)\n      if (norm_delta < joints_theta_delta) {\n        pivot(vec.current, curr_delta)\n        setPrevAngle(props.angles[0])\n      }\n      else {\n        if (props.angles[0] > prevAngle) {\n          pivot(vec.current, +joints_theta_delta)\n          setPrevAngle(prevAngle + joints_theta_delta)\n        }\n        else if (props.angles[0] < prevAngle) {\n          pivot(vec.current, -joints_theta_delta)\n          setPrevAngle(prevAngle - joints_theta_delta)\n        }\n      }\n    }\n  }\n\n  useFrame(() => {\n    const { angles, setAngles, joints_theta_delta } = props\n    if (vec.current) {\n      if (props.controlKeys[arm_comps.CD.pos_key]) {\n        pivot(vec.current, +joints_theta_delta)\n        setAngles([angles[0] + joints_theta_delta, angles[1], angles[2], 0])\n        setPrevAngle(angles[0] + joints_theta_delta)\n      }\n      else if (props.controlKeys[arm_comps.CD.neg_key]) {\n        pivot(vec.current, -joints_theta_delta)\n        setAngles([angles[0] - joints_theta_delta, angles[1], angles[2], 0])\n        setPrevAngle(angles[0] - joints_theta_delta)\n      }\n      if (props.mode && props.modeInit) { // update angle using ik\n        // let theta_delta = props.angles[0] - prevAngle\n        // pivot(vec.current, theta_delta)\n        // setPrevAngle(props.angles[0])\n        step_towards_angle()\n      }\n      if (props.controlTask && props.controlAngles.length > 0) { // handle control task\n        setAngles([props.controlAngles[1], props.controlAngles[2], props.controlAngles[3]])\n        step_towards_angle()\n      }\n    }\n  })\n\n  return (\n    <mesh {...props}\n      ref={mesh}>\n      <ArmComp file={props.file} color={props.color} />\n      <vector3 ref={vec} args={arm_comps.CD.joint as any}/>\n      <BC controlKeys={props.controlKeys}\n          file={arm_comps.BC.file}\n          color={arm_comps.BC.color}\n          position={arm_comps.BC.position as any}\n          rotation={arm_comps.BC.rotation as any}\n          joints_theta_delta={props.joints_theta_delta}\n          wrist_theta_delta={props.wrist_theta_delta}\n          angles={props.angles}\n          setAngles={props.setAngles}\n          mode={props.mode}\n          modeInit={props.modeInit}\n          controlTask={props.controlTask}\n          controlAngles={props.controlAngles} />\n    </mesh>\n  )\n}\n\nconst Arm: React.FC<MeshProps & RenderProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const [modeInit, setModeInit] = useState(false)      // flag for initializing auto mode\n  const [angles, setAngles] = useState(initial_angles) // store BCD joint angles\n  const [joints, setJoints] = useState([[0,0],[0,0],[0,0],[0,0]])\n  const [prevBaseAngle, setPrevBaseAngle] = useState(inital_base_angle)\n  const [baseAngle, setBaseAngle] = useState(inital_base_angle)\n\n  function calculate_kinematics() {\n    var { base_angle, target_2D } = orient_base(props.target)\n    // if (base_angle != null && mesh.current) {\n    //   mesh.current.rotation.y = -base_angle\n    // }\n    target_2D[1] -= base_offset[1] // subtract base y-offset\n    // check if it's easier to move to a smaller angle\n    if (base_angle - prevBaseAngle > max_base_angle) {\n      base_angle = -(Math.PI - base_angle)\n      target_2D[0] = -(target_2D[0] + base_offset[0]) // flip axis\n    }\n    else if (base_angle - prevBaseAngle < -max_base_angle) {\n      base_angle = Math.PI + base_angle\n      target_2D[0] = -(target_2D[0] + base_offset[0]) // flip axis\n    }\n    else {\n      target_2D[0] -= base_offset[0] // subtract base x-offset\n    }\n    setBaseAngle(base_angle)\n    let new_angles = solve_ik([...joints], [...angles], link_lengths, arm_length, target_2D)\n    if (new_angles) setAngles(new_angles)\n  }\n\n  function step_towards_angle() {\n    const { base_theta_delta } = props\n    var curr_delta = Math.abs(baseAngle - prevBaseAngle)\n    if (mesh.current) {\n      if (curr_delta < base_theta_delta) { // step towards target location\n        mesh.current.rotation.y = -baseAngle\n        setPrevBaseAngle(baseAngle)\n      }\n      else {\n        if (baseAngle > prevBaseAngle) {\n          mesh.current.rotation.y -= base_theta_delta\n          setPrevBaseAngle(prevBaseAngle + base_theta_delta)\n        }\n        else if (baseAngle < prevBaseAngle) {\n          mesh.current.rotation.y += base_theta_delta\n          setPrevBaseAngle(prevBaseAngle - base_theta_delta)\n        }\n      }\n    }\n  }\n\n  function same_pt(pt1: number[], pt2: number[]) { // return true if points are the same\n    var i: number\n    for (var i = 0; i < pt1.length; ++i)\n      if (pt1[i] !== pt2[i]) return false\n    return true\n  }\n\n  function handle_recording() {\n    const { mode, recordedTask }= props\n    if (recordedTask.length == 0) {\n      if (mode)\n        props.setRecordedTask([props.target])\n      else // todo\n        props.setRecordedTask([baseAngle, ...angles, 0, 1])\n    }\n    else {\n      if (mode && !same_pt(props.target,recordedTask[recordedTask.length-1])) { // automatic mode\n        let newRecordedTask = [...recordedTask, props.target]\n        props.setRecordedTask(newRecordedTask)\n      }\n      else if (!mode) { // todo not finished\n        var new_task_angles = [baseAngle, ...angles, 0, 1]\n        if (!same_pt(angles,recordedTask[recordedTask.length-1])){ // control mode\n          let newRecordedTask = [...recordedTask, new_task_angles]\n          props.setRecordedTask(newRecordedTask)\n        }\n      }\n    }\n  }\n\n  useFrame(() => {\n    const { mode, base_theta_delta } = props \n    if (mesh.current) { // control mode operations\n      if (props.controlKeys.ArrowRight) {\n        mesh.current.rotation.y -= base_theta_delta\n        setBaseAngle(baseAngle - base_theta_delta)\n        setPrevBaseAngle(prevBaseAngle - base_theta_delta)\n      }\n      else if (props.controlKeys.ArrowLeft) {\n        mesh.current.rotation.y += base_theta_delta\n        setBaseAngle(baseAngle + base_theta_delta)\n        setPrevBaseAngle(prevBaseAngle + base_theta_delta)\n      }\n      // handle modeInit flag\n      if (mode && !modeInit) {\n        setModeInit(true) // calculate current joint positions\n        let new_joints = solve_fk([...joints], angles, link_lengths)\n        setJoints(new_joints)\n      }\n      else if (!mode && modeInit)\n        setModeInit(false) // reset when in control mode\n      // detect if arm is currently in auto mode\n      if (mode && modeInit) {\n        calculate_kinematics()\n        step_towards_angle()\n      }\n      // handle controlTasks\n      if (props.controlTask && props.controlAngles.length > 0) {\n        setBaseAngle(-props.controlAngles[0])\n        step_towards_angle()\n      }\n      // handle recording task\n      if (props.taskRecord) {\n        // console.log(props.recordedTask)\n        handle_recording()\n      }\n    }\n  })\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}>\n      <Suspense fallback={<Box position={[1.2, 0, 0]} />}>\n        <CD \n          controlKeys={props.controlKeys}\n          file={arm_comps.CD.file} \n          color={arm_comps.CD.color}\n          position={arm_comps.CD.position as any} \n          rotation={arm_comps.CD.rotation as any}\n          joints_theta_delta={props.joints_theta_delta}\n          wrist_theta_delta={props.wrist_theta_delta}\n          angles={angles}\n          setAngles={setAngles} \n          mode={props.mode}\n          modeInit={modeInit}\n          controlTask={props.controlTask}\n          controlAngles={props.controlAngles} />\n        <ArmComp\n          file={arm_comps.BaseE1.file} \n          color={arm_comps.BaseE1.color}\n          position={arm_comps.BaseE1.position as any} \n          rotation={arm_comps.BaseE1.rotation as any} />\n        <ArmComp\n          file={arm_comps.BaseE2.file} \n          color={arm_comps.BaseE2.color}\n          position={arm_comps.BaseE2.position as any} \n          rotation={arm_comps.BaseE2.rotation as any} />\n        <ArmComp\n          file={arm_comps.TurnTable.file} \n          color={arm_comps.TurnTable.color}\n          position={arm_comps.TurnTable.position as any} \n          rotation={arm_comps.TurnTable.rotation as any} />\n      </Suspense>\n    </mesh>\n  )\n}\n\nconst Target: React.FC<MeshProps & TargetProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const controls = useRef<DragControls>()\n  const { camera, gl: { domElement },  } = useThree()\n\n  useFrame(() => {\n    if (!props.targetSelected && mesh.current) // prevent interference w/ drag\n      props.setTarget(mesh.current.position.toArray())\n  })\n\n  const toggleDrag = (e: any) => {\n    if (props.targetSelected) { // unselect target\n      props.setTargetSelected(false)\n      // props.setKRun(true) // start running kinematics\n    }\n    else props.setTargetSelected(true) // select target\n  }\n\n  return (\n    <>\n      <mesh \n        {...props}\n        ref={mesh}\n        onClick={toggleDrag} >\n        <sphereBufferGeometry args={[0.08, 16, 16]} />\n        <meshPhongMaterial color={\"orange\"} />\n      </mesh>\n      { mesh.current && \n      <dragControls \n        ref={controls}\n        args={[[mesh.current], camera, domElement]} /> }\n    </>\n  )\n}\n\nconst Box: React.FC<MeshProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n\n  useFrame(() => {\n    if (mesh.current) mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n  })\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)} >\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nconst ViewControls = () => {  \n  const controls = useRef<OrbitControls>()\n  const { camera, gl: { domElement },  } = useThree()\n\n  useEffect(() => {\n    if (controls.current)\n      controls.current.target = new Vector3(0, 1.6, 0)\n  })\n\n  useFrame(() => {\n    if (controls.current) controls.current.update()  \n  })\n\n  return (\n    <orbitControls \n      ref={controls} \n      args={[camera, domElement]} \n      enableZoom={true} />\n  )\n}\n\nexport default function Renderer(props: RenderProps) {\n  const [targetSelected, setTargetSelected] = useState(false)\n  // const [kRun, setKRun] = useState(false) // flag for activating kinematics calc\n  return (\n    <div className=\"Render\">\n    <Canvas camera={{ position: [0, 3, 3] }}>\n      { !targetSelected && <ViewControls /> }\n      <directionalLight intensity={0.8} />\n      <gridHelper />\n      <pointLight position={[0, 10, 20]} />\n      { props.mode && <Target \n        position={props.target as any}\n        target={props.target}\n        setTarget={props.setTarget}\n        targetSelected={targetSelected}\n        setTargetSelected={setTargetSelected} /> }\n      <Arm \n        target={props.target}\n        setTarget={null}\n        wrist_theta_delta={props.wrist_theta_delta}\n        joints_theta_delta={props.joints_theta_delta}\n        base_theta_delta={props.base_theta_delta}\n        mode={props.mode} \n        controlKeys={props.controlKeys}\n        controlTask={props.controlTask}\n        setControlTask={props.setControlTask}\n        controlAngles={props.controlAngles}\n        setControlAngles={props.setControlAngles}\n        taskRecord={props.taskRecord}\n        recordedTask={props.recordedTask}\n        setRecordedTask={props.setRecordedTask} />\n    </Canvas>\n    </div>\n  )\n}\n","import Renderer from \"./Render\"\n// const { ipcRenderer } = window.require('electron')\n\ninterface ControlProps {\n  mode: boolean,\n  controlKeys: any,\n  target: number[],\n  setTarget: any,\n  base_theta_delta: number,\n  joints_theta_delta: number,\n  wrist_theta_delta: number,\n  controlTask: boolean,\n  setControlTask: any,\n  controlAngles: number[],\n  setControlAngles: any,\n  taskRecord: boolean,\n  recordedTask: any[],\n  setRecordedTask: any\n}\n\nexport default function Controls(props: ControlProps) {\n\n  // for (let key in props.controlKeys){\n  //   if (props.controlKeys[key])\n  //     console.log(ipcRenderer.sendSync(\"control\", key))\n  // }   \n  return (\n    <div style={{height: \"100vh\", overflow: \"hidden\"}}>\n      <Renderer \n        mode={props.mode} \n        controlKeys={props.controlKeys}\n        target={props.target}\n        setTarget={props.setTarget}\n        base_theta_delta={props.base_theta_delta} \n        joints_theta_delta={props.joints_theta_delta} \n        wrist_theta_delta={props.wrist_theta_delta}\n        controlTask={props.controlTask}\n        setControlTask={props.setControlTask}\n        controlAngles={props.controlAngles}\n        setControlAngles={props.setControlAngles}\n        taskRecord={props.taskRecord}\n        recordedTask={props.recordedTask}\n        setRecordedTask={props.setRecordedTask} />\n    </div>\n  );\n}\n","import { useState, useEffect, useCallback } from 'react';\nimport Menu from \"./Menu\"\nimport Controls from \"./Controls\";\nimport './App.css';\nimport './font-awesome-4.7.0/css/font-awesome.min.css'\n// const { ipcRenderer } = window.require('electron')\n\nconst controlKeys_false = {\n  \"ArrowUp\": false, \"ArrowDown\": false, \"ArrowLeft\": false, \"ArrowRight\": false,\n  \"w\": false, \"s\": false, \"a\": false, \"d\": false, \"r\": false, \"f\": false,\n  \"x\": false, \"z\": false\n}\n\n// keys that will still be active in auto mode\nconst controlKeys_auto = { \"a\": false, \"d\": false, \"x\": false, \"z\": false }\n\nexport default function App() {\n  const [mode, setMode] = useState(false) // false if control mode, true if auto\n  const [taskRecord, setTaskRecord] = useState(false)\n  const [recordedTask, setRecordedTask] = useState([])\n  const [currentTask, setCurrentTask] = useState([]) // stores task being recorded\n  const [taskList, setTaskList] = useState([[]])\n  const [controlTask, setControlTask] = useState(false) // activated if control task\n  const [controlAngles, setControlAngles] = useState([])\n  const [controlKeys, setKeys] = useState(controlKeys_false)\n  const [target, setTarget] = useState([1,0,0]) // tracks the location of the target to create\n  const [base_theta_delta, setBaseSpeed] = useState(0.04)\n  const [joints_theta_delta, setJointSpeed] = useState(0.02)\n  const [wrist_theta_delta, setWristSpeed] = useState(0.02)\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    setKeys(prevKeys => ({...prevKeys, [e.key]: true}))\n  }, [])\n\n  const handleKeyUp = useCallback((e : KeyboardEvent) => {\n    setKeys(prevKeys => ({...prevKeys, [e.key]: false}))\n  }, [])\n\n  const handleAutoKeyDown = useCallback((e : KeyboardEvent) => {\n    if (e.key in controlKeys_auto)\n      setKeys(prevKeys => ({...prevKeys, [e.key]: true}))\n  }, [])\n\n  const handleAutoKeyUp = useCallback((e : KeyboardEvent) => {\n    if (e.key in controlKeys_auto)\n      setKeys(prevKeys => ({...prevKeys, [e.key]: false}))\n  }, [])\n\n  const setControlMode = () => {\n    if (mode) { // set to control mode\n      setMode(false)\n      window.removeEventListener(\"keydown\", handleAutoKeyDown, true)\n      window.removeEventListener(\"keyup\", handleAutoKeyUp, true)\n      window.addEventListener(\"keydown\", handleKeyDown, true)\n      window.addEventListener(\"keyup\", handleKeyUp, true)\n    } \n  }\n\n  const setAutomaticMode = () => {\n    if (!mode) { // set to automatic mode\n      setMode(true)\n      setKeys(controlKeys_false)\n      window.removeEventListener(\"keydown\", handleKeyDown, true)\n      window.removeEventListener(\"keyup\", handleKeyUp, true)\n      window.addEventListener(\"keydown\", handleAutoKeyDown, true)\n      window.addEventListener(\"keyup\", handleAutoKeyUp, true)\n    }\n  }\n\n  const saveTask = () => { // TODO\n    // var res = ipcRenderer.sendSync(\"tasks\", \"save\"))\n    setTaskList([...taskList, currentTask])\n    setCurrentTask([]) // reset current task\n  }\n\n  const handleRecordTask = () => {\n    if (taskRecord) {\n      setTaskRecord(false)\n      saveTask()\n    }\n    else {\n      setTaskRecord(true)\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown, true)\n  }, [handleKeyDown]);\n\n  useEffect(() => {\n    window.addEventListener(\"keyup\", handleKeyUp, true)\n  }, [handleKeyUp]);\n\n  return (\n    <div className=\"App\">\n      <Menu \n        mode={mode} \n        setControlMode={setControlMode} \n        setAutomaticMode={setAutomaticMode}\n        handleTaskRecord={handleRecordTask}\n        base_theta_delta={base_theta_delta} \n        joints_theta_delta={joints_theta_delta} \n        wrist_theta_delta={wrist_theta_delta}\n        setBaseSpeed={setBaseSpeed}\n        setJointSpeed={setJointSpeed}\n        setWristSpeed={setWristSpeed} \n        target={target}\n        setTarget={setTarget} \n        controlTask={controlTask}\n        setControlTask={setControlTask}\n        setControlAngles={setControlAngles}\n        taskRecord={taskRecord}\n        setTaskRecord={setTaskRecord}\n        recordedTask={recordedTask}\n        setRecordedTask={setRecordedTask} />\n      <Controls \n        mode={mode} \n        controlKeys={controlKeys} \n        target={target}\n        setTarget={setTarget}\n        base_theta_delta={base_theta_delta} \n        joints_theta_delta={joints_theta_delta} \n        wrist_theta_delta={wrist_theta_delta}\n        controlTask={controlTask}\n        setControlTask={setControlTask}\n        controlAngles={controlAngles}\n        setControlAngles={setControlAngles}\n        taskRecord={taskRecord}\n        recordedTask={recordedTask}\n        setRecordedTask={setRecordedTask} />\n\n        {/* <button onClick={()=>{\n              ipcRenderer.send('anything-asynchronous', 'ping')\n              ipcRenderer.on('asynchronous-reply', (_event: any, arg: any) => {\n                console.log(\"Hiii\",arg)\n              })\n          }}>Async</button>\n\n        <button onClick={()=>{          \n            // prints \"pong\"         \n            console.log(ipcRenderer.sendSync('synch', 'ping'))     \n        }}>Sync</button> */}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}