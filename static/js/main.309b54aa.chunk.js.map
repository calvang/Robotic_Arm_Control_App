{"version":3,"sources":["Menu.tsx","kinematics.ts","Render.tsx","Controls.tsx","App.tsx","index.tsx"],"names":["field_map","PopupField","props","index","className","type","name","value","target","onChange","e","new_target","setTarget","Automatic","onSubmit","preventDefault","style","display","task_columns","field","headerName","width","Tasks","useState","task_list","i","default_tasks","push","length","data","desc","readData","tasks","height","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","map","col","TableCell","TableBody","row","idx","scope","Record","isRecording","setIsRecording","mode","onClick","ValueSlider","withStyles","root","color","thumb","backgroundColor","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","Settings","base_theta_delta","valueLabelDisplay","step","min","max","val","setBaseSpeed","joints_theta_delta","setJointSpeed","wrist_theta_delta","setWristSpeed","Help","MenuButton","handler","icon","Menu","help","setHelp","setTasks","settings","setSettings","record","setRecord","position","zIndex","setControlMode","setAutomaticMode","distance","pt1","pt2","Math","sqrt","pow","signed_arctan","coord","atan","PI","sign","solve_fk","joints","angles","links","prev_angle","prev_joint","cos","sin","solve_ik","current_e","curr_dist","reach","headIdx","tailIdx","linkIdx","r","scale","curr_vec","curr_angle","update_angles","console","error","extend","OrbitControls","DragControls","x_axis","Vector3","z_axis","arm_scale","base_offset","blue","white","initial_angles","link_lengths","arm_length","reduce","a","b","arm_comps","Finger1","file","rotation","joint","pos_key","neg_key","Finger2","HandCover","HandBase","HandCase","AB","bounds","BC","CD","BaseE1","BaseE2","TurnTable","ArmComp","mesh","useRef","obj","useLoader","OBJLoader2","traverse","child","Mesh","material","MeshPhongMaterial","setRGB","set","ref","object","vec","pivot","point","theta","current","sub","applyAxisAngle","add","useFrame","controlKeys","clawStep","setClawStep","args","Hand","rotateOnAxis","prevAngle","setPrevAngle","setAngles","modeInit","curr_delta","abs","Arm","setModeInit","setJoints","prevBaseAngle","setPrevBaseAngle","baseAngle","setBaseAngle","calculate_kinematics","xz_comp","new_base_angle","base_angle","target_2D","orient_base","new_angles","ArrowRight","y","ArrowLeft","new_joints","fallback","Target","controls","useThree","camera","domElement","gl","targetSelected","toArray","setTargetSelected","Box","hovered","setHover","setActive","event","onPointerOver","onPointerOut","ViewControls","useEffect","update","enableZoom","Renderer","intensity","Controls","overflow","controlKeys_false","controlKeys_auto","App","setMode","taskRecord","setTaskRecord","currentTask","setCurrentTask","taskList","setTaskList","setKeys","handleKeyDown","useCallback","prevKeys","key","handleKeyUp","handleAutoKeyDown","handleAutoKeyUp","window","addEventListener","removeEventListener","handleTaskRecord","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.309b54aa.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { Slider, Table, TableBody, TableCell, TableContainer,\n         TableHead, TableRow, Paper, withStyles  } from '@material-ui/core'\nimport * as default_tasks from './default_tasks.json'\n// const { ipcRenderer } = window.require('electron')\n\ninterface MenuProps {\n  mode: boolean,\n  setControlMode: any,\n  setAutomaticMode: any,\n  handleTaskRecord: any,\n  base_theta_delta: number,\n  joints_theta_delta: number,\n  wrist_theta_delta: number,\n  setBaseSpeed: any,\n  setJointSpeed: any, \n  setWristSpeed: any,\n  target: number[],\n  setTarget: any\n}\n\ninterface PopupProps {\n  target: number[],\n  setTarget: any,\n  index: number // index to change within the target\n}\n\ninterface AutoProps {\n  target: number[],\n  setTarget: any,\n}\n\ninterface RecordProps {\n  mode: boolean,\n  record: boolean\n}\n\ninterface SettingsProps {\n  base_theta_delta: number,\n  joints_theta_delta: number,\n  wrist_theta_delta: number,\n  setBaseSpeed: any,\n  setJointSpeed: any, \n  setWristSpeed: any\n}\n\ninterface MenuButtonProps {\n  icon: string,\n  handler: any,\n  active: boolean\n}\n\nconst field_map = [\"x\", \"y\", \"z\"]\n\nconst PopupField = (props: PopupProps) => {\n  const handleChange = (e: any) => {\n    let new_target = [...props.target]\n    new_target[props.index] = e.target.value\n    props.setTarget(new_target)\n  }\n\n  return ( \n    <td>\n      <label>{field_map[props.index]}</label>\n      <input className=\"PopupField\" type=\"text\" \n        name={field_map[props.index]} \n        value={props.target[props.index]}\n        onChange={handleChange} />\n    </td>\n  )\n}\n\nconst Automatic = (props: AutoProps) => {\n  const handleSubmit = (e: any) => { // this is here to prevent reloading\n    e.preventDefault()\n  }\n\n  return (\n    <div className=\"Popup\">\n      <b>Target Coordinates</b>\n      <form onSubmit={handleSubmit}>\n        <table><tbody><tr>\n          <PopupField \n            target={props.target}\n            setTarget={props.setTarget} \n            index={0} />\n          <PopupField \n            target={props.target}\n            setTarget={props.setTarget} \n            index={1} />\n          <PopupField \n            target={props.target}\n            setTarget={props.setTarget} \n            index={2} />\n        </tr></tbody></table>\n        <input type=\"submit\" style={{ display: \"none\" }} />\n      </form>\n    </div>\n  )\n}\n\nconst task_columns = [\n  { field: \"name\", headerName: \"Task\", width: 70 },\n  { field: \"length\", headerName: \"Length\", width: 30 },\n  { field: \"desc\", headerName: \"Description\", width: 200 }\n]\n\nconst Tasks = () => {\n  const [isList, setIsList] = useState(true) // whether on the main task list\n  const [tasks, setTasks] = useState(readData())\n  // var res = ipcRenderer.sendSync(\"tasks\", \"get\"))\n\n  function readData() {\n    var task_list = []\n    for (let i in default_tasks.tasks)\n      task_list.push({\n        name: default_tasks.tasks[i].name, \n        length: default_tasks.tasks[i].data.length, \n        desc: default_tasks.tasks[i].desc })\n    return task_list\n  }\n\n  return (\n    <div className=\"Menu\">\n      <div className=\"MenuHeader\"><h3>TASKS</h3></div>\n      <div className=\"MenuBody\" style={{ height: \"calc(100vh - 56px\" }}>\n        <br/>\n        <TableContainer component={Paper}>\n          <Table aria-label=\"tasks table\">\n            <TableHead>\n              <TableRow>\n                { task_columns.map((col) => {\n                  return <TableCell \n                    key={col.field}\n                    style={{ width: col.width}}>\n                    <b>{col.headerName}</b>\n                  </TableCell>\n                })}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              { tasks.map((row, idx) => {\n                return <TableRow key={idx}>\n                  <TableCell scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell>{row.length}</TableCell>\n                  <TableCell>{row.desc}</TableCell>\n                </TableRow>\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    </div>\n  )\n}\n\nconst Record = (props: RecordProps) => {\n  const [isRecording, setIsRecording] = useState(false)\n  const { mode } = props\n\n  const onClick = (e: any) => {\n    if (isRecording) setIsRecording(false)\n    else setIsRecording(true)\n  }\n\n  return (\n    <div className={ `Record ${mode ? \"RecordAuto\" : \"RecordControl\"}` }>    \n      { \n        !isRecording ? <>Start Recording:&nbsp;&nbsp;\n          <button className=\"RecordButton\" onClick={onClick}>\n            <i className=\"fa fa-circle fa-lg\" ></i>\n          </button></> \n        : <>Stop Recording:&nbsp;&nbsp;\n          <button className=\"RecordButton\" onClick={onClick}>\n            <i className=\"fa fa-stop-circle fa-lg\" ></i>\n          </button></> \n      }\n    </div>\n  )\n}\n\nconst ValueSlider = withStyles({\n  root: {\n    color: '#2469c4',\n    height: 8,\n    width: \"90%\"\n  },\n  thumb: {\n    height: 14,\n    width: 14,\n    backgroundColor: '#cbcdcf',\n    marginTop: -3,\n    marginLeft: -7,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-64%)',\n    // height: 4\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n\nconst Settings = (props: SettingsProps) => {\n  // const classes = useStyles()\n\n  const handleBase = (e: any, val: number | number[]) => {\n    props.setBaseSpeed(val)\n  }\n\n  const handleJoints = (e: any, val: number | number[]) => {\n    props.setJointSpeed(val)\n  }\n\n  const handleWrist = (e: any, val: number | number[]) => {\n    props.setWristSpeed(val)\n  }\n\n\n  return (\n    <div className=\"Menu\">\n      <div className=\"MenuHeader\"><h3>Settings</h3></div>\n      <div className=\"MenuBody\">\n        <p>\n          The following parameters are rotational velocities in radians per frame of movement.\n        </p>\n        <h4>Base Rotation</h4>\n          <ValueSlider \n            value={props.base_theta_delta}\n            valueLabelDisplay=\"auto\"\n            track=\"inverted\"\n            step={0.01}\n            min={0.02}\n            max={1}\n            onChange={handleBase} />\n        <h4>Joint Rotation</h4>\n          <ValueSlider \n            value={props.joints_theta_delta}\n            valueLabelDisplay=\"auto\"\n            track=\"inverted\"\n            step={0.01}\n            min={0.01}\n            max={1}\n            onChange={handleJoints} />\n        <h4>Wrist Rotation</h4>\n          <ValueSlider \n            value={props.wrist_theta_delta}\n            valueLabelDisplay=\"auto\"\n            track=\"inverted\"\n            step={0.01}\n            min={0.01}\n            max={1}\n            onChange={handleWrist} /><br/><br/>\n      </div>\n    </div>\n  )\n}\n\nconst Help = () => {\n  return (\n    <div className=\"Menu\">\n      <div className=\"MenuHeader\"><h3>HELP</h3></div>\n      <div className=\"MenuBody\">\n        <h4><i className=\"fa fa-arrows fa-lg\" ></i> Control Mode</h4>\n        <p>\n          In control mode, the arm is directly controlled via the following keybindings:<br/><br/>\n          <code>ArrowRight/ArrowLeft</code> - Base E Yaw<br/>\n          <code>ArrowUp/ArrowDown</code> - Joint D Pitch<br/>\n          <code>R/F</code> - Joint C Pitch<br/>\n          <code>W/S</code> - Joint B Pitch<br/>\n          <code>D/A</code> - Wrist A Roll<br/>\n          <code>X/Z</code> - End Effector Open/Close<br/>\n          Tasks can be recorded in this mode by pressing the record button <i className=\"fa fa-plus-square-o fa-lg\" ></i>.\n        </p>\n        <h4><i className=\"fa fa-magic fa-lg\" ></i> Automatic Mode</h4>\n        <p>\n          In automatic mode, keyboard controls for the arm except for those for the wrist and claw are disabled, \n          and the arm uses inverse kinematics the navigate by following inputed coordinates.<br/><br/>\n          Target coordinates are indicated by an orange point can be changed through a popup tool or by dragging the point\n          around. To drag the point, click the object to disable orbit controls and then use the mouse to drag it.\n          Tasks can be recorded in this mode by pressing the record button <i className=\"fa fa-plus-square-o fa-lg\" ></i>.\n        </p>\n        <h4><i className=\"fa fa-files-o fa-lg\" ></i> Tasks</h4>\n        <p>\n          Tasks are lists of instructions that can program the arm to move in a predetermined pattern. <br/><br/>\n          Example instruction with arm angles: \n        </p>\n        <pre>\n          # Schema: angles in degrees <br/>\n          # E  D  C  B  A <br/>\n          90 40 30 90 120 \n        </pre>\n        <p>Example instruction with target positions: </p>\n        <pre>\n          # Schema: end effector positon <br/>\n          # x   y   z <br/>\n          1.56 5.87 2.35 \n        </pre>\n      </div>\n    </div>\n  )\n}\n\nconst MenuButton = (props: MenuButtonProps) => {\n  return (\n    <li className={props.active ? \"active_opt\" : \"\" }>\n      <button onClick={props.handler}>\n        <i className={`fa ${props.icon} fa-2x`} ></i>\n      </button>\n    </li>\n  )\n}\n\nexport default function Menu(props: MenuProps) {\n  const [help, setHelp] = useState(false)\n  const [tasks, setTasks] = useState(false)\n  const [settings, setSettings] = useState(false)\n  const [record, setRecord] = useState(false)\n\n  const handleHelp = () => {\n    if (help) setHelp(false)\n    else {\n      if (tasks) setTasks(false)\n      else if (settings) setSettings(false)\n      setHelp(true)\n    }\n  }\n\n  const handleTasks = () => {\n    if (tasks) setTasks(false)\n    else {\n      if (help) setHelp(false)\n      else if (settings) setSettings(false)\n      setTasks(true)\n    }\n  }\n\n  const handleSettings = () => {\n    if (settings) setSettings(false)\n    else {\n      if (tasks) setTasks(false)\n      else if (help) setHelp(false)\n      setSettings(true)\n    }\n  }\n\n  const handleRecord = () => {\n    if (record) setRecord(false)\n    else setRecord(true)\n  }\n\n  return (\n    <div style={{ color: \"white\", position: \"absolute\", zIndex: 2 }}>\n      <ul>\n        <MenuButton icon=\"fa-arrows\" handler={props.setControlMode} active={!props.mode} />\n        <MenuButton icon=\"fa-magic\" handler={props.setAutomaticMode} active={props.mode}/>\n        <MenuButton icon=\"fa-files-o\" handler={handleTasks} active={tasks}/>\n        <MenuButton icon=\"fa-plus-square-o\" handler={handleRecord} active={record}/>\n        <MenuButton icon=\"fa-tasks\" handler={handleSettings} active={settings}/>\n        <MenuButton icon=\"fa-question-circle-o\" handler={handleHelp} active={help}/>\n      </ul>\n      { props.mode && <Automatic \n        target={props.target}\n        setTarget={props.setTarget} /> }\n      { tasks && <Tasks /> }\n      { record && <Record \n        mode={props.mode}\n        record={record} /> }\n      { settings && <Settings \n        base_theta_delta={props.base_theta_delta} \n        joints_theta_delta={props.joints_theta_delta} \n        wrist_theta_delta={props.wrist_theta_delta}\n        setBaseSpeed={props.setBaseSpeed}\n        setJointSpeed={props.setJointSpeed}\n        setWristSpeed={props.setWristSpeed} /> }\n      { help && <Help /> }\n    </div>\n  )\n}","/**\n * Kinematics Javascript Library\n * \n * Constraints:\n * - The base must be centered at [0,0,0]\n * - The arm joints must all be constrained to a 2D plane\n *   aside from the base and the wrist\n */\n\n/**\n * Find the distance between two 2D points\n */\nfunction distance(pt1: number[], pt2: number[]) {\n    return Math.sqrt(Math.pow(pt2[0]-pt1[0],2) + Math.pow(pt2[1]-pt1[1],2))\n}\n\n/**\n * Solve for the angle of a given coordinate wrt the x-axis\n */\nfunction signed_arctan(coord: number[]) {\n    return Math.atan(coord[1] / coord[0]) + Math.PI * (1 - Math.sign(coord[0])) / 2\n}\n\n/**\n * Find position of the end effector and update joint positions (forward kinematics)\n * \n * @param joints \n * @param angles \n */\nexport function solve_fk(joints: number[][], angles: number[], links: number[]) {\n    var prev_angle = angles[0]\n    var prev_joint = [...joints[0]]\n    for (let i = 1; i < angles.length; ++i) {\n        prev_joint[0] += links[i] * Math.cos(prev_angle)\n        prev_joint[1] += links[i] * Math.sin(prev_angle)\n        prev_angle += angles[i]\n        joints[i] = [...prev_joint]\n    }\n    return joints // updated joint positions with end effector\n}\n\n/**\n * Update angles based on correct joint positions\n * \n * @param joints \n * @param angles \n */\nexport function update_angles(joints: number[][], angles: number[]) {\n    var prev_angle = 0\n    var curr_vec = [0,0]\n    for (let i = 1; i < angles.length; ++i) { // update the angles\n        curr_vec[0] = joints[i][0] - joints[i-1][0]\n        curr_vec[1] = joints[i][1] - joints[i-1][1]\n        var curr_angle = signed_arctan(curr_vec) - prev_angle\n        if (curr_angle > Math.PI) curr_angle -= 2*Math.PI\n        else if (curr_angle < -Math.PI) curr_angle += 2*Math.PI\n        angles[i-1] = curr_angle\n        prev_angle += curr_angle\n    }\n    return angles\n}\n\n/**\n * Find the angles to reach the target (inverse kinematics)\n * \n * @param joints      - size 4x2 array of 2D joint positions ([0,0],D,C,B)\n * @param angles      - size 4 array of joint angles (D, C, B, 0)\n * @param links       - size 4 array of link lengths (0, CD, BC, AB)\n * @param length      - total length of the arm\n * @param target      - 2D target coordinates\n */\nexport function solve_ik(joints: number[][], angles: number[],\n    links: number[], length: number, target: number[] ) {\n\n    var eps = 0.01 // distance threshold\n    if (distance([0,0], target) > length) {\n        console.error(\"Target out of range:\", target)\n        return \n    }\n\n    // get the position of the end effector\n    var current_e = solve_fk(joints, angles, links)[joints.length-1]\n    var curr_dist = distance(current_e, target)\n\n    const reach = (headIdx: number, tailIdx: number, linkIdx: number) => {\n        let r = distance(joints[headIdx], joints[tailIdx])\n        let scale = links[linkIdx] / r\n        joints[tailIdx][0] = (1-scale)*joints[headIdx][0] + scale*joints[tailIdx][0]\n        joints[tailIdx][1] = (1-scale)*joints[headIdx][1] + scale*joints[tailIdx][1]\n        // joints[tailIdx] = [(1-scale)*joints[headIdx][0] + scale*joints[tailIdx][0],\n        //                     (1-scale)*joints[headIdx][1] + scale*joints[tailIdx][1]]\n    }\n    // console.log(joints)\n    while (curr_dist > eps) { // solve for the new joint positions\n        joints[joints.length-1] = target\n        for (let i = joints.length-2; i > 0; --i)\n            reach(i+1, i, i+1)\n        for (let i = 1; i < joints.length-1; ++i)\n            reach(i, i+1, i+1)\n        current_e = joints[joints.length-1]\n        curr_dist = distance(current_e, target)\n    }\n\n    return update_angles(joints, angles)\n}\n\n/**\n * Orient the base towards the desired target point using inverse kinematic\n */\nexport function orient_base(target: number[]) {\n    var xz_comp = [target[0], target[2]]\n    var new_base_angle = signed_arctan(xz_comp)\n    if (new_base_angle > Math.PI) new_base_angle -= 2*Math.PI\n    else if (new_base_angle < -Math.PI) new_base_angle += 2*Math.PI\n    var h = distance([0,0], xz_comp)\n    return { base_angle: new_base_angle,\n             target_2D:  [h, target[1]] }\n}\n","import React, { useRef, useState, Suspense, useEffect } from 'react'\nimport { Canvas, MeshProps, Vector3Props, useFrame, useLoader, useThree, extend, ReactThreeFiber } from 'react-three-fiber'\nimport { OBJLoader2 } from 'three/examples/jsm/loaders/OBJLoader2.js'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { DragControls } from 'three/examples/jsm/controls/DragControls'\nimport { Mesh, Vector3, MeshPhongMaterial } from 'three'\nimport { solve_fk, solve_ik, orient_base } from './kinematics'\nextend({ OrbitControls, DragControls })\n\ndeclare global { // workaround for using OrbitControls as a JSX component\n  namespace JSX {\n    interface IntrinsicElements {\n      'orbitControls': ReactThreeFiber.Object3DNode<OrbitControls, typeof OrbitControls>,\n      'dragControls': ReactThreeFiber.Object3DNode<DragControls, typeof DragControls>\n    }\n  }\n}\n\ninterface FingerProps {\n  clawStep: number, // iterations of the claw\n  setClawStep: any\n}\n\ninterface WristProps {\n  wrist_theta_delta: number\n}\n\ninterface JointProps {\n  joints_theta_delta: number,\n  wrist_theta_delta: number,\n  angles: number[],\n  setAngles: any,\n  mode: boolean,\n  modeInit: boolean\n}\n\ninterface CompProps {\n  file: string,    // path to .obj file\n  color: number[]  // RGB color values\n}\n\ninterface ControlProps {\n  controlKeys: any\n}\n\ninterface TargetProps {\n  target: number[],\n  setTarget: any,\n  targetSelected: boolean,\n  setTargetSelected: any\n}\n\ninterface RenderProps {\n  target: number[],\n  setTarget: any,\n  base_theta_delta: number,\n  joints_theta_delta: number,\n  wrist_theta_delta: number,\n  mode: boolean,\n  controlKeys: any\n}\n\nconst x_axis             = new Vector3(1, 0, 0)\nconst z_axis             = new Vector3(0, 0, 1)\nconst arm_scale          = 0.01\nconst base_offset        = [0.35, 0.81, 0]\nconst blue               = [0.05, 0.15, 0.6]\nconst white              = [0.5, 0.5, 0.5]\nconst base_constraints   = [-125*180/Math.PI, 125*180/Math.PI] // angle contraints for base\nconst joint_constraints  = [] // TODO\nconst inital_base_angle  = 0 //-Math.PI/2\nconst initial_angles     = [Math.PI/2, -Math.PI/2, -Math.PI/2, 0]  // D, C, D angles (rad)\nconst link_lengths       = [0, 1.58, 1.403, 1.54] // CD, BC, AB + Effector lengths\nconst arm_length         = link_lengths.reduce((a,b) => { return a + b }) // total arm length\nconst claw_steps         = 60 // max steps to take with the claw\nconst claw_theta_delta   = 0.004 \n\nconst arm_comps = {\n  Finger1: { file: \"models/linkage_finger1.obj\", // the further finger at the start\n        color: white,\n        position: [1.04, -0.11, 0.15],\n        rotation: [Math.PI, 0, Math.PI],\n        joint: [0, 0.14, 0.225 ],\n        pos_key: \"x\", neg_key: \"z\" },\n  Finger2: { file: \"models/linkage_finger2.obj\", // the closer finger at the start\n        color: white,\n        position: [1.04, 0.455, 0.05],\n        rotation: [Math.PI , Math.PI, 0],\n        joint: [0, 0.12, 0.225],\n        pos_key: \"x\", neg_key: \"z\" },\n  HandCover: { file:  \"models/moment_body.obj\",\n        color: white,\n        position: [0.666, 0, 0.072],\n        rotation: [0, Math.PI, 0] },\n  HandBase: { file:  \"models/torque_base.obj\",\n        color: white,\n        position: [0.668, 0, 0.176],\n        rotation: [0, Math.PI, 0] },\n  HandCase: { file: \"models/torque_servo.obj\",\n        color: blue,\n        position: [-0.42, 0.08, 0.05],\n        rotation: [-Math.PI/2, 0, Math.PI],\n        joint: [0, 0.16, 0.225],\n        pos_key: \"a\", neg_key: \"d\" },\n  AB: { file: \"models/AB_stepper.obj\", // .obj file path\n        color: white,                  // color to set object to\n        position: [1.76, -0.2, -0.46], // starting position\n        rotation: [0, 0, Math.PI/2],   // starting angle\n        joint: [1.58, 0.28, 0],        // pivot point for joint\n        bounds: [-125, 125],\n        pos_key: \"w\", neg_key: \"s\" },\n  BC: { file: \"models/BC.obj\",\n        color: blue,\n        position: [0.22, 0.38, 0.47],\n        rotation: [Math.PI , Math.PI, Math.PI/2],\n        joint: [0.46, 0.18, 0],\n        bounds: [-125, 125],\n        pos_key: \"r\", neg_key: \"f\" },\n  CD: { file: \"models/CD.obj\",\n        color: white,\n        position: [0.35, 1.93, -0.22],\n        rotation: [-Math.PI , Math.PI, -Math.PI/2 ],\n        joint: [0.16, 0.81, 0],\n        bounds: [0, 180],\n        pos_key: \"ArrowUp\", neg_key: \"ArrowDown\" },\n  BaseE1: { file: \"models/BaseEnew.obj\",\n        color: blue,\n        position: [0.32, -0.02, 0.26],\n        rotation: [-Math.PI/2, 0.24, Math.PI] },\n  BaseE2: { file: \"models/BaseEnewother.obj\",\n        color: blue,\n        position: [-0.38, 0.14, 0.26],\n        rotation: [-Math.PI/2, 0.24, 0] },\n  TurnTable: { file: \"models/newTurntable.obj\",\n        color: blue,\n        position: [0, 0, 0],\n        rotation: [Math.PI/2, Math.PI, -Math.PI/2] }\n}\n\nconst ArmComp: React.FC<MeshProps & CompProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const obj: any = useLoader(OBJLoader2, props.file) // loader for .obj\n  obj.traverse(function (child: any) {  // set mesh material colors\n    if (child instanceof Mesh) {\n      child.material = new MeshPhongMaterial()\n      child.material.color.setRGB(props.color[0],props.color[1],props.color[2]) \n    }\n    })    \n  obj.scale.set( arm_scale, arm_scale, arm_scale );\n  return <mesh {...props} ref={mesh}><primitive object={obj} /></mesh>\n}\n\nconst Finger1: React.FC<MeshProps & Vector3Props & FingerProps\n  & CompProps & ControlProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const vec = useRef<Vector3>()\n  \n  function pivot(point: Vector3, theta: number) { // rotate object around a given point\n    if (mesh.current) {\n      mesh.current.position.sub(point) // remove the offset\n      mesh.current.position.applyAxisAngle(z_axis, theta) // rotate the POSITION\n      mesh.current.position.add(point) // re-add the offset\n    }\n  }\n\n  useFrame(() => {\n    if (vec.current) {\n      if (props.controlKeys[arm_comps.Finger1.pos_key] \n        && props.clawStep < claw_steps) {\n        props.setClawStep(props.clawStep + 1)\n        pivot(vec.current, -claw_theta_delta)\n      }\n      else if (props.controlKeys[arm_comps.Finger1.neg_key]\n        && props.clawStep >= 0) {\n        props.setClawStep(props.clawStep - 1)\n        pivot(vec.current, +claw_theta_delta)\n      }\n    }\n  })\n\n  return (\n    <mesh {...props} ref={mesh}>\n      <ArmComp file={props.file} color={props.color}/>\n      <vector3 ref={vec} args={arm_comps.Finger1.joint as any}/>\n    </mesh>\n  )\n}\n\nconst Finger2: React.FC<MeshProps & Vector3Props & FingerProps \n  & CompProps & ControlProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const vec = useRef<Vector3>()\n  \n  function pivot(point: Vector3, theta: number) { // rotate object around a given point\n    if (mesh.current) {\n      mesh.current.position.sub(point) // remove the offset\n      mesh.current.position.applyAxisAngle(z_axis, -theta) // rotate the POSITION\n      mesh.current.position.add(point) // re-add the offset\n    }\n  }\n\n  useFrame(() => {\n    if (vec.current) {\n      if (props.controlKeys[arm_comps.Finger2.pos_key] \n        && props.clawStep < claw_steps) {\n        props.setClawStep(props.clawStep + 1)\n        pivot(vec.current, -claw_theta_delta)\n      }\n      else if (props.controlKeys[arm_comps.Finger2.neg_key]\n        && props.clawStep >= 0) {\n        props.setClawStep(props.clawStep - 1)\n        pivot(vec.current, +claw_theta_delta)\n      }\n    }\n  })\n\n  return (\n    <mesh {...props} ref={mesh}>\n      <ArmComp file={props.file} color={props.color}/>\n      <vector3 ref={vec} args={arm_comps.Finger2.joint as any}/>\n    </mesh>\n  )\n}\n\n\nconst Hand: React.FC<MeshProps & Vector3Props & WristProps\n  & CompProps & ControlProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const vec = useRef<Vector3>()\n  const [clawStep, setClawStep] = useState(0) // number of claw iterations\n  \n  function pivot(point: Vector3, theta: number) { // rotate object around a given point\n    if (mesh.current) {\n      mesh.current.position.sub(point) // remove the offset\n      mesh.current.position.applyAxisAngle(x_axis, theta) // rotate the POSITION\n      mesh.current.position.add(point) // re-add the offset\n      mesh.current.rotateOnAxis(x_axis, -theta) // rotate the OBJECT\n    }\n  }\n\n  useFrame(() => {\n    if (vec.current) {\n      if (props.controlKeys[arm_comps.HandCase.pos_key])\n        pivot(vec.current, +props.wrist_theta_delta)\n      else if (props.controlKeys[arm_comps.HandCase.neg_key])\n        pivot(vec.current, -props.wrist_theta_delta)\n    }\n  })\n\n  return (\n    <mesh {...props} ref={mesh}>\n      <ArmComp file={props.file} color={props.color}/>\n      <vector3 ref={vec} args={arm_comps.HandCase.joint as any}/>\n      <ArmComp // Hand Base\n        file={arm_comps.HandBase.file} \n        color={arm_comps.HandBase.color}\n        position={arm_comps.HandBase.position as any}\n        rotation={arm_comps.HandBase.rotation as any} />\n      <ArmComp // Hande Cover\n        file={arm_comps.HandCover.file} \n        color={arm_comps.HandCover.color}\n        position={arm_comps.HandCover.position as any}\n        rotation={arm_comps.HandCover.rotation as any} />\n      <Finger1 // Finger 1\n        controlKeys={props.controlKeys}\n        file={arm_comps.Finger1.file}\n        color={arm_comps.Finger1.color}\n        position={arm_comps.Finger1.position as any}\n        rotation={arm_comps.Finger1.rotation as any} \n        clawStep={clawStep}\n        setClawStep={setClawStep} />\n      <Finger2 // Finger 2\n        controlKeys={props.controlKeys}\n        file={arm_comps.Finger2.file}\n        color={arm_comps.Finger2.color}\n        position={arm_comps.Finger2.position as any}\n        rotation={arm_comps.Finger2.rotation as any}\n        clawStep={clawStep}\n        setClawStep={setClawStep} />\n    </mesh>\n  )\n}\n\nconst AB: React.FC<MeshProps & Vector3Props & JointProps\n  & CompProps & ControlProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const vec = useRef<Vector3>()\n  const [prevAngle, setPrevAngle] = useState(initial_angles[2])\n  \n  function pivot(point: Vector3, theta: number) { // rotate object around a given point\n    if (mesh.current) {\n      mesh.current.position.sub(point) // remove the offset\n      mesh.current.position.applyAxisAngle(z_axis, theta) // rotate the POSITION\n      mesh.current.position.add(point) // re-add the offset\n      mesh.current.rotateOnAxis(z_axis, theta) // rotate the OBJECT\n    }\n  }\n\n  useFrame(() => {\n    const { angles, setAngles, joints_theta_delta } = props\n    if (vec.current) {\n      if (props.controlKeys[arm_comps.AB.pos_key]) {\n        pivot(vec.current, +joints_theta_delta)\n        setAngles([angles[0], angles[1], angles[2] + joints_theta_delta, 0])\n        setPrevAngle(angles[2] + joints_theta_delta)  \n      }\n      else if (props.controlKeys[arm_comps.AB.neg_key]) {\n        pivot(vec.current, -joints_theta_delta)\n        setAngles([angles[0], angles[1], angles[2] - joints_theta_delta, 0])\n        setPrevAngle(angles[2] - joints_theta_delta)\n      }\n      if (props.mode && props.modeInit) { // update angle using ik\n        // let theta_delta = props.angles[2] - prevAngle\n        // pivot(vec.current, theta_delta)\n        // setPrevAngle(props.angles[2])\n        var curr_delta = props.angles[2] - prevAngle\n        var norm_delta = Math.abs(curr_delta)\n        if (norm_delta < joints_theta_delta) {\n          pivot(vec.current, curr_delta)\n          setPrevAngle(props.angles[2])\n        }\n        else {\n          if (props.angles[2] > prevAngle) {\n            pivot(vec.current, +joints_theta_delta)\n            setPrevAngle(prevAngle + joints_theta_delta)\n          }\n          else if (props.angles[2] < prevAngle) {\n            pivot(vec.current, -joints_theta_delta)\n            setPrevAngle(prevAngle - joints_theta_delta)\n          }\n        }\n      }\n    }\n  })\n\n  return (\n    <mesh {...props} ref={mesh}>\n      <ArmComp file={props.file} color={props.color}/>\n      <vector3 ref={vec} args={arm_comps.AB.joint as any}/>\n      <Hand \n        controlKeys={props.controlKeys} \n        file={arm_comps.HandCase.file} \n        color={arm_comps.HandCase.color}\n        position={arm_comps.HandCase.position as any}\n        rotation={arm_comps.HandCase.rotation as any}\n        wrist_theta_delta={props.wrist_theta_delta} />\n    </mesh>\n  )\n}\n\nconst BC: React.FC<MeshProps & Vector3Props & JointProps\n  & CompProps & ControlProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const vec = useRef<Vector3>()\n  const [prevAngle, setPrevAngle] = useState(initial_angles[1])\n  \n  function pivot(point: Vector3, theta: number) {\n    if (mesh.current) {\n      mesh.current.position.sub(point) // remove the offset\n      mesh.current.position.applyAxisAngle(z_axis, theta) // rotate the POSITION\n      mesh.current.position.add(point) // re-add the offset\n      mesh.current.rotateOnAxis(z_axis, theta) // rotate the OBJECT\n    }\n  }\n\n  useFrame(() => {\n    const { angles, setAngles, joints_theta_delta } = props\n    if (vec.current) {\n      if (props.controlKeys[arm_comps.BC.pos_key]) {\n        pivot(vec.current, +joints_theta_delta)\n        setAngles([angles[0], angles[1] + joints_theta_delta, angles[2], 0])\n        setPrevAngle(angles[1] + joints_theta_delta)\n      }\n      else if (props.controlKeys[arm_comps.BC.neg_key]) {\n        pivot(vec.current, -joints_theta_delta)\n        setAngles([angles[0], angles[1] - joints_theta_delta, angles[2], 0])\n        setPrevAngle(angles[1] - joints_theta_delta)\n      }\n      if (props.mode && props.modeInit) { // update angle using ik\n        // let theta_delta = props.angles[1] - prevAngle\n        // pivot(vec.current, theta_delta)\n        // setPrevAngle(props.angles[1])\n        var curr_delta = props.angles[1] - prevAngle\n        var norm_delta = Math.abs(curr_delta)\n        if (norm_delta < joints_theta_delta) {\n          pivot(vec.current, curr_delta)\n          setPrevAngle(props.angles[1])\n        }\n        else {\n          if (props.angles[1] > prevAngle) {\n            pivot(vec.current, +joints_theta_delta)\n            setPrevAngle(prevAngle + joints_theta_delta)\n          }\n          else if (props.angles[1] < prevAngle) {\n            pivot(vec.current, -joints_theta_delta)\n            setPrevAngle(prevAngle - joints_theta_delta)\n          }\n        }\n      }\n    }\n  })\n  \n  return (\n    <mesh {...props}\n      ref={mesh}>\n      <ArmComp file={props.file} color={props.color}/>\n      <vector3 ref={vec} args={arm_comps.BC.joint as any}/>\n      <AB controlKeys={props.controlKeys}\n          file={arm_comps.AB.file}\n          color={arm_comps.AB.color}\n          position={arm_comps.AB.position as any}\n          rotation={arm_comps.AB.rotation as any}\n          joints_theta_delta={props.joints_theta_delta}\n          wrist_theta_delta={props.wrist_theta_delta}\n          angles={props.angles}\n          setAngles={props.setAngles}\n          mode={props.mode}\n          modeInit={props.modeInit} />\n    </mesh>\n  )\n}\n\nconst CD: React.FC<MeshProps & Vector3Props & JointProps\n  & CompProps & ControlProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const vec = useRef<Vector3>()\n  const [prevAngle, setPrevAngle] = useState(initial_angles[0])\n\n  function pivot(point: Vector3, theta: number) {\n    if (mesh.current) {\n      mesh.current.position.sub(point) // remove the offset\n      mesh.current.position.applyAxisAngle(z_axis, theta) // rotate the POSITION\n      mesh.current.position.add(point) // re-add the offset\n      mesh.current.rotateOnAxis(z_axis, theta) // rotate the OBJECT\n    }\n  }\n\n  useFrame(() => {\n    const { angles, setAngles, joints_theta_delta } = props\n    if (vec.current) {\n      if (props.controlKeys[arm_comps.CD.pos_key]) {\n        pivot(vec.current, +joints_theta_delta)\n        setAngles([angles[0] + joints_theta_delta, angles[1], angles[2], 0])\n        setPrevAngle(angles[0] + joints_theta_delta)\n      }\n      else if (props.controlKeys[arm_comps.CD.neg_key]) {\n        pivot(vec.current, -joints_theta_delta)\n        setAngles([angles[0] - joints_theta_delta, angles[1], angles[2], 0])\n        setPrevAngle(angles[0] - joints_theta_delta)\n      }\n      if (props.mode && props.modeInit) { // update angle using ik\n        // let theta_delta = props.angles[0] - prevAngle\n        // pivot(vec.current, theta_delta)\n        // setPrevAngle(props.angles[0])\n        var curr_delta = props.angles[0] - prevAngle\n        var norm_delta = Math.abs(curr_delta)\n        if (norm_delta < joints_theta_delta) {\n          pivot(vec.current, curr_delta)\n          setPrevAngle(props.angles[0])\n        }\n        else {\n          if (props.angles[0] > prevAngle) {\n            pivot(vec.current, +joints_theta_delta)\n            setPrevAngle(prevAngle + joints_theta_delta)\n          }\n          else if (props.angles[0] < prevAngle) {\n            pivot(vec.current, -joints_theta_delta)\n            setPrevAngle(prevAngle - joints_theta_delta)\n          }\n        }\n      }\n    }\n  })\n\n  return (\n    <mesh {...props}\n      ref={mesh}>\n      <ArmComp file={props.file} color={props.color} />\n      <vector3 ref={vec} args={arm_comps.CD.joint as any}/>\n      <BC controlKeys={props.controlKeys}\n          file={arm_comps.BC.file}\n          color={arm_comps.BC.color}\n          position={arm_comps.BC.position as any}\n          rotation={arm_comps.BC.rotation as any}\n          joints_theta_delta={props.joints_theta_delta}\n          wrist_theta_delta={props.wrist_theta_delta}\n          angles={props.angles}\n          setAngles={props.setAngles}\n          mode={props.mode}\n          modeInit={props.modeInit} />\n    </mesh>\n  )\n}\n\nconst Arm: React.FC<MeshProps & RenderProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const [modeInit, setModeInit] = useState(false)      // flag for initializing auto mode\n  const [angles, setAngles] = useState(initial_angles) // store BCD joint angles\n  const [joints, setJoints] = useState([[0,0],[0,0],[0,0],[0,0]])\n  const [prevBaseAngle, setPrevBaseAngle] = useState(inital_base_angle)\n  const [baseAngle, setBaseAngle] = useState(inital_base_angle)\n  \n  function calculate_kinematics() {\n    var { base_angle, target_2D } = orient_base(props.target)\n    // if (base_angle != null && mesh.current) {\n    //   mesh.current.rotation.y = -base_angle\n    // }\n    target_2D[1] -= base_offset[1] // subtract base y-offset\n    // check if it's easier to move to a smaller angle\n    if (base_angle - prevBaseAngle > Math.PI/2) {\n      base_angle = -(Math.PI - base_angle)\n      target_2D[0] = -(target_2D[0] + base_offset[0]) // flip axis\n    }\n    else if (base_angle - prevBaseAngle < -Math.PI/2) {\n      base_angle = Math.PI + base_angle\n      target_2D[0] = -(target_2D[0] + base_offset[0]) // flip axis\n    }\n    else {\n      target_2D[0] -= base_offset[0] // subtract base x-offset\n    }\n    setBaseAngle(base_angle)\n    let new_angles = solve_ik([...joints], [...angles], link_lengths, arm_length, target_2D)\n    if (new_angles) setAngles(new_angles)\n  }\n\n  useFrame(() => {\n    const { mode, base_theta_delta } = props \n    if (mesh.current) { // control mode operations\n      if (props.controlKeys.ArrowRight) {\n        mesh.current.rotation.y -= base_theta_delta\n        setBaseAngle(baseAngle - base_theta_delta)\n        setPrevBaseAngle(prevBaseAngle - base_theta_delta)\n      }\n      else if (props.controlKeys.ArrowLeft) {\n        mesh.current.rotation.y += base_theta_delta\n        setBaseAngle(baseAngle + base_theta_delta)\n        setPrevBaseAngle(prevBaseAngle + base_theta_delta)\n      }\n      // handle modeInit flag\n      if (mode && !modeInit) {\n        setModeInit(true) // calculate current joint positions\n        let new_joints = solve_fk([...joints], angles, link_lengths)\n        setJoints(new_joints)\n      }\n      else if (!mode && modeInit)\n        setModeInit(false) // reset when in control mode\n      // detect if arm is currently in auto mode\n      if (mode && modeInit) {\n        calculate_kinematics()\n        var curr_delta = Math.abs(baseAngle - prevBaseAngle)\n        if (curr_delta < base_theta_delta) { // step towards target location\n          mesh.current.rotation.y = -baseAngle\n          setPrevBaseAngle(baseAngle)\n        }\n        else {\n          if (baseAngle > prevBaseAngle) {\n            mesh.current.rotation.y -= base_theta_delta\n            setPrevBaseAngle(prevBaseAngle + base_theta_delta)\n          }\n          else if (baseAngle < prevBaseAngle) {\n            mesh.current.rotation.y += base_theta_delta\n            setPrevBaseAngle(prevBaseAngle - base_theta_delta)\n          }\n        }\n      }\n    }\n  })\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}>\n      <Suspense fallback={<Box position={[1.2, 0, 0]} />}>\n        <CD \n          controlKeys={props.controlKeys}\n          file={arm_comps.CD.file} \n          color={arm_comps.CD.color}\n          position={arm_comps.CD.position as any} \n          rotation={arm_comps.CD.rotation as any}\n          joints_theta_delta={props.joints_theta_delta}\n          wrist_theta_delta={props.wrist_theta_delta}\n          angles={angles}\n          setAngles={setAngles} \n          mode={props.mode}\n          modeInit={modeInit} />\n        <ArmComp\n          file={arm_comps.BaseE1.file} \n          color={arm_comps.BaseE1.color}\n          position={arm_comps.BaseE1.position as any} \n          rotation={arm_comps.BaseE1.rotation as any} />\n        <ArmComp\n          file={arm_comps.BaseE2.file} \n          color={arm_comps.BaseE2.color}\n          position={arm_comps.BaseE2.position as any} \n          rotation={arm_comps.BaseE2.rotation as any} />\n        <ArmComp\n          file={arm_comps.TurnTable.file} \n          color={arm_comps.TurnTable.color}\n          position={arm_comps.TurnTable.position as any} \n          rotation={arm_comps.TurnTable.rotation as any} />\n      </Suspense>\n    </mesh>\n  )\n}\n\nconst Target: React.FC<MeshProps & TargetProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const controls = useRef<DragControls>()\n  const { camera, gl: { domElement },  } = useThree()\n\n  useFrame(() => {\n    if (!props.targetSelected && mesh.current) // prevent interference w/ drag\n      props.setTarget(mesh.current.position.toArray())\n  })\n\n  const toggleDrag = (e: any) => {\n    if (props.targetSelected) { // unselect target\n      props.setTargetSelected(false)\n      // props.setKRun(true) // start running kinematics\n    }\n    else props.setTargetSelected(true) // select target\n  }\n\n  return (\n    <>\n      <mesh \n        {...props}\n        ref={mesh}\n        onClick={toggleDrag} >\n        <sphereBufferGeometry args={[0.08, 16, 16]} />\n        <meshPhongMaterial color={\"orange\"} />\n      </mesh>\n      { mesh.current && \n      <dragControls \n        ref={controls}\n        args={[[mesh.current], camera, domElement]} /> }\n    </>\n  )\n}\n\nconst Box: React.FC<MeshProps> = (props) => {\n  const mesh = useRef<Mesh>()\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n\n  // useFrame(() => {\n  //   if (mesh.current) mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n  // })\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)} >\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nconst ViewControls = () => {  \n  const controls = useRef<OrbitControls>()\n  const { camera, gl: { domElement },  } = useThree()\n\n  useEffect(() => {\n    if (controls.current)\n      controls.current.target = new Vector3(0, 1.6, 0)\n  })\n\n  useFrame(() => {\n    if (controls.current) controls.current.update()  \n  })\n\n  return (\n    <orbitControls \n      ref={controls} \n      args={[camera, domElement]} \n      enableZoom={true} />\n  )\n}\n\nexport default function Renderer(props: RenderProps) {\n  const [targetSelected, setTargetSelected] = useState(false)\n  // const [kRun, setKRun] = useState(false) // flag for activating kinematics calc\n  return (\n    <div className=\"Render\">\n    <Canvas camera={{ position: [0, 3, 3] }}>\n      { !targetSelected && <ViewControls /> }\n      <directionalLight intensity={0.8} />\n      <gridHelper />\n      <pointLight position={[0, 10, 20]} />\n      { props.mode && <Target \n        position={props.target as any}\n        target={props.target}\n        setTarget={props.setTarget}\n        targetSelected={targetSelected}\n        setTargetSelected={setTargetSelected} /> }\n      <Arm \n        target={props.target}\n        setTarget={null}\n        wrist_theta_delta={props.wrist_theta_delta}\n        joints_theta_delta={props.joints_theta_delta}\n        base_theta_delta={props.base_theta_delta}\n        mode={props.mode} \n        controlKeys={props.controlKeys} />\n    </Canvas>\n    </div>\n  )\n}\n","import { Props } from \"react\";\nimport Renderer from \"./Render\"\n// const { ipcRenderer } = window.require('electron')\n\ninterface ControlProps {\n  mode: boolean,\n  controlKeys: any,\n  target: number[],\n  setTarget: any,\n  base_theta_delta: number,\n  joints_theta_delta: number,\n  wrist_theta_delta: number,\n}\n\nexport default function Controls(props: ControlProps) {\n\n  // for (let key in props.controlKeys){\n  //   if (props.controlKeys[key])\n  //     console.log(ipcRenderer.sendSync(\"control\", key))\n  // }   \n  return (\n    <div style={{height: \"100vh\", overflow: \"hidden\"}}>\n      <Renderer \n        mode={props.mode} \n        controlKeys={props.controlKeys}\n        target={props.target}\n        setTarget={props.setTarget}\n        base_theta_delta={props.base_theta_delta} \n        joints_theta_delta={props.joints_theta_delta} \n        wrist_theta_delta={props.wrist_theta_delta} />\n    </div>\n  );\n}\n","import { useState, useEffect, useCallback } from 'react';\nimport Menu from \"./Menu\"\nimport Controls from \"./Controls\";\nimport './App.css';\nimport './font-awesome-4.7.0/css/font-awesome.min.css'\n// const { ipcRenderer } = window.require('electron')\n\nconst controlKeys_false = {\n  \"ArrowUp\": false, \"ArrowDown\": false, \"ArrowLeft\": false, \"ArrowRight\": false,\n  \"w\": false, \"s\": false, \"a\": false, \"d\": false, \"r\": false, \"f\": false,\n  \"x\": false, \"z\": false\n}\n\n// keys that will still be active in auto mode\nconst controlKeys_auto = { \"a\": false, \"d\": false, \"x\": false, \"z\": false }\n\nexport default function App() {\n  const [mode, setMode] = useState(false) // false if control mode, true if auto\n  const [taskRecord, setTaskRecord] = useState(false)\n  const [currentTask, setCurrentTask] = useState([]) // stores task being recorded\n  const [taskList, setTaskList] = useState([[]])\n  const [controlKeys, setKeys] = useState(controlKeys_false)\n  const [target, setTarget] = useState([1,0,0]) // tracks the location of the target to create\n  const [base_theta_delta, setBaseSpeed] = useState(0.04)\n  const [joints_theta_delta, setJointSpeed] = useState(0.02)\n  const [wrist_theta_delta, setWristSpeed] = useState(0.02)\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    setKeys(prevKeys => ({...prevKeys, [e.key]: true}))\n  }, [])\n\n  const handleKeyUp = useCallback((e : KeyboardEvent) => {\n    setKeys(prevKeys => ({...prevKeys, [e.key]: false}))\n  }, [])\n\n  const handleAutoKeyDown = useCallback((e : KeyboardEvent) => {\n    if (e.key in controlKeys_auto)\n      setKeys(prevKeys => ({...prevKeys, [e.key]: true}))\n  }, [])\n\n  const handleAutoKeyUp = useCallback((e : KeyboardEvent) => {\n    if (e.key in controlKeys_auto)\n      setKeys(prevKeys => ({...prevKeys, [e.key]: false}))\n  }, [])\n\n  const setControlMode = () => {\n    if (mode) { // set to control mode\n      setMode(false)\n      window.removeEventListener(\"keydown\", handleAutoKeyDown, true)\n      window.removeEventListener(\"keyup\", handleAutoKeyUp, true)\n      window.addEventListener(\"keydown\", handleKeyDown, true)\n      window.addEventListener(\"keyup\", handleKeyUp, true)\n    } \n  }\n\n  const setAutomaticMode = () => {\n    if (!mode) { // set to automatic mode\n      setMode(true)\n      setKeys(controlKeys_false)\n      window.removeEventListener(\"keydown\", handleKeyDown, true)\n      window.removeEventListener(\"keyup\", handleKeyUp, true)\n      window.addEventListener(\"keydown\", handleAutoKeyDown, true)\n      window.addEventListener(\"keyup\", handleAutoKeyUp, true)\n    }\n  }\n\n  const saveTask = () => { // TODO\n    // var res = ipcRenderer.sendSync(\"tasks\", \"save\"))\n    setTaskList([...taskList, currentTask])\n    setCurrentTask([]) // reset current task\n  }\n\n  const handleRecordTask = () => {\n    if (taskRecord) {\n      setTaskRecord(false)\n      saveTask()\n    }\n    else {\n      setTaskRecord(true)\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown, true)\n  }, [handleKeyDown]);\n\n  useEffect(() => {\n    window.addEventListener(\"keyup\", handleKeyUp, true)\n  }, [handleKeyUp]);\n\n  return (\n    <div className=\"App\">\n      <Menu \n        mode={mode} \n        setControlMode={setControlMode} \n        setAutomaticMode={setAutomaticMode}\n        handleTaskRecord={handleRecordTask}\n        base_theta_delta={base_theta_delta} \n        joints_theta_delta={joints_theta_delta} \n        wrist_theta_delta={wrist_theta_delta}\n        setBaseSpeed={setBaseSpeed}\n        setJointSpeed={setJointSpeed}\n        setWristSpeed={setWristSpeed} \n        target={target}\n        setTarget={setTarget}/>\n      <Controls \n        mode={mode} \n        controlKeys={controlKeys} \n        target={target}\n        setTarget={setTarget}\n        base_theta_delta={base_theta_delta} \n        joints_theta_delta={joints_theta_delta} \n        wrist_theta_delta={wrist_theta_delta} />\n\n        {/* <button onClick={()=>{\n              ipcRenderer.send('anything-asynchronous', 'ping')\n              ipcRenderer.on('asynchronous-reply', (_event: any, arg: any) => {\n                console.log(\"Hiii\",arg)\n              })\n          }}>Async</button>\n\n        <button onClick={()=>{          \n            // prints \"pong\"         \n            console.log(ipcRenderer.sendSync('synch', 'ping'))     \n        }}>Sync</button> */}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}